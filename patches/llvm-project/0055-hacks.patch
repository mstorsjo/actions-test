From d79d17861dae1d6ee1bf0e3b42d3519e138e63b8 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Thu, 27 Jun 2024 21:06:11 +0100
Subject: [PATCH 55/56] hacks

---
 lld/COFF/InputFiles.cpp | 12 ++++--------
 1 file changed, 4 insertions(+), 8 deletions(-)

diff --git a/lld/COFF/InputFiles.cpp b/lld/COFF/InputFiles.cpp
index 830b2b86abba..93eb14290e06 100644
--- a/lld/COFF/InputFiles.cpp
+++ b/lld/COFF/InputFiles.cpp
@@ -78,7 +78,7 @@ std::string lld::toString(const coff::InputFile *file) {
 /// If Source is Undefined and has no weak alias set, makes it a weak
 /// alias to Target.
 static void checkAndSetWeakAlias(COFFTargetContext &targetCtx, InputFile *f,
-                                 Symbol *source, Symbol *target, bool isAntiDep) {
+                                 Symbol *source, Symbol *target, bool isAntiDep, bool alias) {
   if (auto *u = dyn_cast<Undefined>(source)) {
     if (u->weakAlias && u->weakAlias != target) {
       // Weak aliases as produced by GCC are named in the form
@@ -86,13 +86,9 @@ static void checkAndSetWeakAlias(COFFTargetContext &targetCtx, InputFile *f,
       // of another symbol emitted near the weak symbol.
       // Just use the definition from the first object file that defined
       // this weak symbol.
-      if (targetCtx.ctx.config.allowDuplicateWeak)
-        return;
       // FIXME: Needs more testing
-      if (isAntiDep)
+      if (isAntiDep || !isArm64EC(targetCtx.machine) || !alias)
         return;
-      if (!u->isAntiDep)
-        targetCtx.symtab.reportDuplicate(source, f);
 
       if (u->ECAlias && isa<Undefined>(u->ECAlias)) {
         cast<Undefined>(u->ECAlias)->ECAlias = nullptr;
@@ -562,7 +558,7 @@ void ObjFile::initializeSymbols() {
     COFFSymbolRef coffSym = check(coffObj->getSymbol(kv.first));
     uint32_t idx = kv.second;
     checkAndSetWeakAlias(target, this, sym, symbols[idx],
-                         coffSym.getWeakExternal()->Characteristics == 4);
+                         coffSym.getWeakExternal()->Characteristics == 4, coffSym.getWeakExternal()->Characteristics == 3);
   }
 
   // Free the memory used by sparseChunks now that symbol loading is finished.
@@ -1282,7 +1278,7 @@ void BitcodeFile::parse() {
       sym = target.symtab.addUndefined(symName, this, true);
       std::string fallback = std::string(objSym.getCOFFWeakExternalFallback());
       Symbol *alias = target.symtab.addUndefined(saver.save(fallback));
-      checkAndSetWeakAlias(target, this, sym, alias, false);
+      checkAndSetWeakAlias(target, this, sym, alias, false, false);
     } else if (comdatIndex != -1) {
       if (symName == obj->getComdatTable()[comdatIndex].first) {
         sym = comdat[comdatIndex].first;
-- 
2.25.1

