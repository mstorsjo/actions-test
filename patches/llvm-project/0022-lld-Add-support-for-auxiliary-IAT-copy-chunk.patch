From 9f89ecc0ca562ab5d54e68252eadb90d3180ab46 Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Sat, 9 Sep 2023 23:09:55 +0200
Subject: [PATCH 22/56] [lld] Add support for auxiliary IAT copy chunk.

---
 lld/COFF/Chunks.cpp                       |  7 ++++
 lld/COFF/DLL.cpp                          | 33 ++++++++++++++++++
 lld/COFF/DLL.h                            |  1 +
 lld/COFF/Driver.cpp                       |  1 +
 lld/COFF/Writer.cpp                       |  9 +++++
 lld/test/COFF/Inputs/loadconfig-arm64ec.s |  2 +-
 lld/test/COFF/arm64ec-import.test         | 42 ++++++++++++++++++++++-
 7 files changed, 93 insertions(+), 2 deletions(-)

diff --git a/lld/COFF/Chunks.cpp b/lld/COFF/Chunks.cpp
index 3c861f6af034..2249d3ae6fc9 100644
--- a/lld/COFF/Chunks.cpp
+++ b/lld/COFF/Chunks.cpp
@@ -422,6 +422,13 @@ void SectionChunk::applyRelocation(uint8_t *off,
                                    const coff_relocation &rel) const {
   auto *sym = dyn_cast_or_null<Defined>(file->getSymbol(rel.SymbolTableIndex));
 
+  if (sym && getMachine() == AMD64 && file->ctx.config.machine == ARM64EC &&
+      isa<DefinedImportData>(sym)) {
+    ImportFile *importFile = cast<DefinedImportData>(sym)->file;
+    if (importFile->ECThunk)
+      sym = importFile->impSym;
+  }
+
   // Get the output section of the symbol for this relocation.  The output
   // section is needed to compute SECREL and SECTION relocations used in debug
   // info.
diff --git a/lld/COFF/DLL.cpp b/lld/COFF/DLL.cpp
index 9098e7066539..ea416690f79b 100644
--- a/lld/COFF/DLL.cpp
+++ b/lld/COFF/DLL.cpp
@@ -164,6 +164,36 @@ private:
   ImportFile *file;
 };
 
+class AuxIATCopyChunk : public NonSectionChunk {
+public:
+  explicit AuxIATCopyChunk(std::vector<Chunk *> &auxIat) : auxIat(auxIat) {
+    setAlignment(sizeof(uint64_t));
+  }
+
+  size_t getSize() const override { return auxIat.size() * sizeof(uint64_t); }
+
+  void writeTo(uint8_t *buf) const override {
+    for (Chunk *chunk : auxIat) {
+      chunk->writeTo(buf);
+      buf += chunk->getSize();
+    }
+  }
+
+  void getBaserels(std::vector<Baserel> *res) override {
+    uint32_t off = 0;
+    for (Chunk *chunk : auxIat) {
+      std::vector<Baserel> rels;
+      chunk->getBaserels(&rels);
+      for (Baserel &rel : rels)
+        res->emplace_back(rel.rva - chunk->getRVA() + rva + off, ARM64EC);
+      off += chunk->getSize();
+    }
+  }
+
+private:
+  std::vector<Chunk *> &auxIat;
+};
+
 static std::vector<std::vector<DefinedImportData *>>
 binImports(COFFLinkerContext &ctx,
            const std::vector<DefinedImportData *> &imports) {
@@ -749,6 +779,9 @@ void IdataContents::create(COFFLinkerContext &ctx) {
       }
       auxIat.push_back(make<NullChunk>(ctx.config.wordsize));
     }
+
+    if (!auxIat.empty())
+      auxIatCopyChunk = make<AuxIATCopyChunk>(auxIat);
   }
 }
 
diff --git a/lld/COFF/DLL.h b/lld/COFF/DLL.h
index b2ad33d51b6b..360370ca853d 100644
--- a/lld/COFF/DLL.h
+++ b/lld/COFF/DLL.h
@@ -37,6 +37,7 @@ public:
   std::vector<Chunk *> hints;
   std::vector<Chunk *> dllNames;
   std::vector<Chunk *> auxIat;
+  Chunk *auxIatCopyChunk = nullptr;
 };
 
 // Windows-specific.
diff --git a/lld/COFF/Driver.cpp b/lld/COFF/Driver.cpp
index 204046168a8a..1ae5ad31c97e 100644
--- a/lld/COFF/Driver.cpp
+++ b/lld/COFF/Driver.cpp
@@ -2413,6 +2413,7 @@ void LinkerDriver::linkerMain(ArrayRef<const char *> argsArr) {
     ctx.symtab.addAbsolute("__arm64x_redirection_metadata", 0);
     ctx.symtab.addAbsolute("__arm64x_redirection_metadata_count", 0);
     ctx.symtab.addAbsolute("__hybrid_auxiliary_iat", 0);
+    ctx.symtab.addAbsolute("__hybrid_auxiliary_iat_copy", 0);
     ctx.symtab.addAbsolute("__hybrid_code_map", 0);
     ctx.symtab.addAbsolute("__hybrid_code_map_count", 0);
     ctx.symtab.addAbsolute("__x64_code_ranges_to_entry_points", 0);
diff --git a/lld/COFF/Writer.cpp b/lld/COFF/Writer.cpp
index e4b2957f6063..ab722e550a5e 100644
--- a/lld/COFF/Writer.cpp
+++ b/lld/COFF/Writer.cpp
@@ -909,6 +909,11 @@ void Writer::addSyntheticIdata() {
   if (!idata.hints.empty())
     add(".idata$6", idata.hints);
   add(".idata$7", idata.dllNames);
+
+  if (idata.auxIatCopyChunk) {
+    PartialSection *pSec = createPartialSection(".idata$a", rdata);
+    pSec->chunks.push_back(idata.auxIatCopyChunk);
+  }
 }
 
 void Writer::appendECImportTables() {
@@ -2255,6 +2260,10 @@ void Writer::setECSymbols() {
   replaceSymbol<DefinedSynthetic>(iatSym, "__hybrid_auxiliary_iat",
                                   idata.auxIat.empty() ? nullptr
                                                        : idata.auxIat.front());
+
+  Symbol *iatCopySym = ctx.symtab.findUnderscore("__hybrid_auxiliary_iat_copy");
+  replaceSymbol<DefinedSynthetic>(iatCopySym, "__hybrid_auxiliary_iat_copy",
+                                  idata.auxIatCopyChunk);
 }
 
 // Write section contents to a mmap'ed file.
diff --git a/lld/test/COFF/Inputs/loadconfig-arm64ec.s b/lld/test/COFF/Inputs/loadconfig-arm64ec.s
index 49197910f201..72d6a1ed64d0 100644
--- a/lld/test/COFF/Inputs/loadconfig-arm64ec.s
+++ b/lld/test/COFF/Inputs/loadconfig-arm64ec.s
@@ -82,7 +82,7 @@ __chpe_metadata:
         .rva __arm64x_extra_rfe_table
         .word __arm64x_extra_rfe_table_size
         .rva __os_arm64x_dispatch_fptr
-        .word 0 // __hybrid_auxiliary_iat_copy
+        .rva __hybrid_auxiliary_iat_copy
         .rva __os_arm64x_helper0
         .rva __os_arm64x_helper1
         .rva __os_arm64x_helper2
diff --git a/lld/test/COFF/arm64ec-import.test b/lld/test/COFF/arm64ec-import.test
index 6f6a4d1ce461..5e51f4cf4885 100644
--- a/lld/test/COFF/arm64ec-import.test
+++ b/lld/test/COFF/arm64ec-import.test
@@ -2,18 +2,26 @@ REQUIRES: aarch64, x86
 RUN: split-file %s %t.dir && cd %t.dir
 
 RUN: llvm-mc -filetype=obj -triple=arm64ec-windows test.s -o test.obj
+RUN: llvm-mc -filetype=obj -triple=x86_64-windows test.s -o test-x86_64.obj
 RUN: llvm-mc -filetype=obj -triple=arm64ec-windows arm64ec-stubs.s -o arm64ec-stubs.obj
 RUN: llvm-mc -filetype=obj -triple=arm64ec-windows %S/Inputs/loadconfig-arm64ec.s -o loadconfig-arm64ec.obj
 RUN: llvm-lib -machine:arm64ec -def:test.def -out:test-arm64ec.lib
 RUN: llvm-lib -machine:arm64ec -def:test2.def -out:test2-arm64ec.lib
+RUN: llvm-lib -machine:x64 -def:test.def -out:test-x64.lib
 
 RUN: lld-link -machine:arm64ec -dll -noentry -out:out.dll loadconfig-arm64ec.obj arm64ec-stubs.obj \
 RUN:          test.obj test-arm64ec.lib test2-arm64ec.lib
+RUN: lld-link -machine:arm64ec -dll -noentry -out:out2.dll loadconfig-arm64ec.obj arm64ec-stubs.obj \
+RUN:          test.obj test-x64.lib test2-arm64ec.lib
+RUN: lld-link -machine:arm64ec -dll -noentry -out:out3.dll loadconfig-arm64ec.obj arm64ec-stubs.obj \
+RUN:          test-x86_64.obj test-x64.lib test2-arm64ec.lib
 
 RUN: llvm-readobj --coff-imports out.dll | FileCheck -check-prefix=IMPORTS %s
+RUN: llvm-readobj --coff-imports out2.dll | FileCheck -check-prefix=IMPORTS %s
+RUN: llvm-readobj --coff-imports out3.dll | FileCheck -check-prefix=IMPORTS %s
 IMPORTS:      Import {
 IMPORTS-NEXT:   Name: test.dll
-IMPORTS-NEXT:   ImportLookupTableRVA:
+IMPORTS-NEXT:   ImportLookupTableRVA: 0x4230
 IMPORTS-NEXT:   ImportAddressTableRVA: 0x3000
 IMPORTS-NEXT:   Symbol: mydata (0)
 IMPORTS-NEXT:   Symbol: myfunc (0)
@@ -27,11 +35,15 @@ IMPORTS-NEXT:   Symbol: myfunc2 (0)
 IMPORTS-NEXT: }
 
 RUN: llvm-readobj --headers out.dll | FileCheck -check-prefix=HEADERS %s
+RUN: llvm-readobj --headers out2.dll | FileCheck -check-prefix=HEADERS %s
+RUN: llvm-readobj --headers out3.dll | FileCheck -check-prefix=HEADERS %s
 HEADERS:  LoadConfigTableRVA: 0x4010
 HEADERS:  IATRVA: 0x3000
 HEADERS:  IATSize: 0x1000
 
 RUN: llvm-objdump -d out.dll | FileCheck -check-prefix=DISASM %s
+RUN: llvm-objdump -d out2.dll | FileCheck -check-prefix=DISASM %s
+RUN: llvm-objdump -d out3.dll | FileCheck -check-prefix=DISASM %s
 DISASM:      180001000: 52800040     mov     w0, #0x2                // =2
 DISASM-NEXT: 180001004: d65f03c0     ret
 DISASM-NEXT: 180001008: 90000030     adrp    x16, 0x180005000
@@ -58,20 +70,48 @@ DISASM-NEXT:                 ...
 DISASM-NEXT: 180002000: ff 25 02 10 00 00            jmpq    *0x1002(%rip)           # 0x180003008
 
 RUN: llvm-readobj --hex-dump=.test out.dll | FileCheck -check-prefix=TESTSEC %s
+RUN: llvm-readobj --hex-dump=.test out2.dll | FileCheck -check-prefix=TESTSEC %s
 TESTSEC:      0x180008000 08500000 08300000 00200000 08100000
 TESTSEC-NEXT: 0x180008010 00300000 00500000 10500000 10300000
 TESTSEC-NEXT: 0x180008020 20500000
 
+RUN: llvm-readobj --hex-dump=.test out3.dll | FileCheck -check-prefix=TESTSEC-X64 %s
+TESTSEC-X64:      0x180008000 08300000 08300000 00200000 08100000
+TESTSEC-X64-NEXT: 0x180008010 00300000 00500000 10300000 10300000
+TESTSEC-X64-NEXT: 0x180008020 20300000
+
 RUN: llvm-readobj --coff-load-config out.dll | FileCheck -check-prefix=LOADCONFIG %s
+RUN: llvm-readobj --coff-load-config out2.dll | FileCheck -check-prefix=LOADCONFIG %s
+RUN: llvm-readobj --coff-load-config out3.dll | FileCheck -check-prefix=LOADCONFIG %s
 LOADCONFIG: AuxiliaryIAT: 0x5000
+LOADCONFIG: AuxiliaryIATCopy: 0x42A0
 
 RUN: llvm-readobj --hex-dump=.rdata out.dll | FileCheck -check-prefix=RDATA %s
+RUN: llvm-readobj --hex-dump=.rdata out2.dll | FileCheck -check-prefix=RDATA %s
+RUN: llvm-readobj --hex-dump=.rdata out3.dll | FileCheck -check-prefix=RDATA %s
+RDATA:      0x1800042a0 00000000 00000000 14100080 01000000
+RDATA-NEXT: 0x1800042b0 28100080 01000000 00000000 00000000
+RDATA-NEXT: 0x1800042c0 3c100080 01000000 00000000 00000000
 RDATA:      0x180005000 00000000 00000000 14100080 01000000
 RDATA-NEXT: 0x180005010 28100080 01000000 00000000 00000000
 RDATA-NEXT: 0x180005020 3c100080 01000000 00000000 00000000
 
 RUN: llvm-readobj --coff-basereloc out.dll | FileCheck -check-prefix=BASERELOC %s
+RUN: llvm-readobj --coff-basereloc out2.dll | FileCheck -check-prefix=BASERELOC %s
+RUN: llvm-readobj --coff-basereloc out3.dll | FileCheck -check-prefix=BASERELOC %s
 BASERELOC:      BaseReloc [
+Aux IAT copy:
+BASERELOC:          Address: 0x42A8
+BASERELOC-NEXT:   }
+BASERELOC-NEXT:   Entry {
+BASERELOC-NEXT:     Type: DIR64
+BASERELOC-NEXT:     Address: 0x42B0
+BASERELOC-NEXT:   }
+BASERELOC-NEXT:   Entry {
+BASERELOC-NEXT:     Type: DIR64
+BASERELOC-NEXT:     Address: 0x42C0
+BASERELOC-NEXT:   }
+Aux IAT:
 BASERELOC-NOT:      Address: 0x5000
 BASERELOC:          Address: 0x5008
 BASERELOC-NEXT:   }
-- 
2.25.1

