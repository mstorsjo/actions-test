From d6c5f79f25b3da6bc765f78f52ecd2edbe2ad12c Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Storsj=C3=B6?= <martin@martin.st>
Date: Sun, 2 Apr 2023 01:21:25 +0300
Subject: [PATCH 21/22] [libcxxabi] Fix a couple of failing tests

---
 libcxxabi/test/catch_ptr_02.pass.cpp               | 3 ++-
 libcxxabi/test/exception_object_alignment.pass.cpp | 2 ++
 libcxxabi/test/test_fallback_malloc.pass.cpp       | 5 +++--
 3 files changed, 7 insertions(+), 3 deletions(-)

diff --git a/libcxxabi/test/catch_ptr_02.pass.cpp b/libcxxabi/test/catch_ptr_02.pass.cpp
index 4683f818b39e..c7ef28a976f8 100644
--- a/libcxxabi/test/catch_ptr_02.pass.cpp
+++ b/libcxxabi/test/catch_ptr_02.pass.cpp
@@ -17,6 +17,7 @@
 // XFAIL: stdlib=apple-libc++ && target={{.+}}-apple-macosx10.9
 
 #include <cassert>
+#include <stdint.h>
 
 #if __cplusplus < 201103L
 #define DISABLE_NULLPTR_TESTS
@@ -136,7 +137,7 @@ void test7 ()
         assert(false);
     }
     catch (base2 *p) {
-        assert ((unsigned long)p == 12+sizeof(base1));
+        assert ((uintptr_t)p == 12+sizeof(base1));
     }
     catch (...)
     {
diff --git a/libcxxabi/test/exception_object_alignment.pass.cpp b/libcxxabi/test/exception_object_alignment.pass.cpp
index f0d49faf6ee0..f34a3afc76ad 100644
--- a/libcxxabi/test/exception_object_alignment.pass.cpp
+++ b/libcxxabi/test/exception_object_alignment.pass.cpp
@@ -17,6 +17,8 @@
 // Check that the pointer __cxa_allocate_exception returns is aligned to the
 // default alignment for the target architecture.
 
+#define _LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS
+
 #include <cassert>
 #include <cstdint>
 #include <cxxabi.h>
diff --git a/libcxxabi/test/test_fallback_malloc.pass.cpp b/libcxxabi/test/test_fallback_malloc.pass.cpp
index e7d22a57d2bc..ff6ef60710c5 100644
--- a/libcxxabi/test/test_fallback_malloc.pass.cpp
+++ b/libcxxabi/test/test_fallback_malloc.pass.cpp
@@ -9,6 +9,7 @@
 #include <cstdio>
 #include <deque>
 #include <cassert>
+#include <inttypes.h>
 
 #include <__threading_support>
 
@@ -192,11 +193,11 @@ int main () {
     print_free_list ();
 
     char *p = (char *) fallback_malloc ( 1024 );    // too big!
-    std::printf("fallback_malloc ( 1024 ) --> %lu\n", (unsigned long ) p);
+    std::printf("fallback_malloc ( 1024 ) --> %" PRIuPTR"\n", (uintptr_t) p);
     print_free_list ();
 
     p = (char *) fallback_malloc ( 32 );
-    std::printf("fallback_malloc ( 32 ) --> %lu\n", (unsigned long) (p - heap));
+    std::printf("fallback_malloc ( 32 ) --> %" PRIuPTR"\n", (uintptr_t) (p - heap));
     if ( !is_fallback_ptr ( p ))
         std::printf("### p is not a fallback pointer!!\n");
 
-- 
2.34.1

