From f9502dcf9f9652c38a2e582adf32aeaeddaf506f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Storsj=C3=B6?= <martin@martin.st>
Date: Tue, 8 Nov 2022 10:50:33 +0200
Subject: [PATCH 06/11] [openmp] [test] Fix data structure mismatches for tests
 that define kmp_depend_info

Use the correct data type for pointer sized integers on Windows;
"long" is always 32 bit, even on 64 bit Windows - don't use it
for the kmp_intptr_t type.

Provide the exact correct definition of the kmp_depend_info
struct - avoid the risk of mismatches (if a platform would pack
things slightly differently when things are declared differently).

Zero initialize the whole dep_info struct before filling it in;
if only setting the in/out bits, the rest of the unallocated bits
in the bitfield can have undefined values. Libomp reads the flags
in combined form as an kmp_uint8 by reading the flag field - thus,
the unused bits do need to be zeroed. (Alternatively, the flag field
could be set to zero before setting the individual bits in the
bitfield).

Use kmp_intptr_t instead of long for casting pointers to integers.

Differential Revision: https://reviews.llvm.org/D137748
---
 .../test/tasking/bug_nested_proxy_task.c      | 24 ++++++++++++++-----
 .../test/tasking/bug_proxy_task_dep_waiting.c | 24 ++++++++++++++-----
 2 files changed, 36 insertions(+), 12 deletions(-)

diff --git a/openmp/runtime/test/tasking/bug_nested_proxy_task.c b/openmp/runtime/test/tasking/bug_nested_proxy_task.c
index 44e754bef044..3d02f7c5db5f 100644
--- a/openmp/runtime/test/tasking/bug_nested_proxy_task.c
+++ b/openmp/runtime/test/tasking/bug_nested_proxy_task.c
@@ -20,8 +20,13 @@
 */
 
 // Compiler-generated code (emulation)
+#ifdef _WIN64
+typedef long long kmp_intptr_t;
+#else
 typedef long kmp_intptr_t;
+#endif
 typedef int kmp_int32;
+typedef unsigned char kmp_uint8;
 
 typedef char bool;
 
@@ -43,10 +48,17 @@ typedef struct ident {
 typedef struct kmp_depend_info {
      kmp_intptr_t               base_addr;
      size_t                     len;
-     struct {
-         bool                   in:1;
-         bool                   out:1;
-     } flags;
+     union {
+        kmp_uint8 flag; // flag as an unsigned char
+        struct { // flag as a set of 8 bits
+            unsigned in : 1;
+            unsigned out : 1;
+            unsigned mtx : 1;
+            unsigned set : 1;
+            unsigned unused : 3;
+            unsigned all : 1;
+        } flags;
+     };
 } kmp_depend_info_t;
 
 struct kmp_task;
@@ -105,8 +117,8 @@ int main()
         my_sleep( 0.1 );
     }
 */
-    kmp_depend_info_t dep_info;
-    dep_info.base_addr = (long) &dep;
+    kmp_depend_info_t dep_info = { 0 };
+    dep_info.base_addr = (kmp_intptr_t) &dep;
     dep_info.len = sizeof(int);
     // out = inout per spec and runtime expects this
     dep_info.flags.in = 1;
diff --git a/openmp/runtime/test/tasking/bug_proxy_task_dep_waiting.c b/openmp/runtime/test/tasking/bug_proxy_task_dep_waiting.c
index 7737a0ef7c67..a28d51c6902a 100644
--- a/openmp/runtime/test/tasking/bug_proxy_task_dep_waiting.c
+++ b/openmp/runtime/test/tasking/bug_proxy_task_dep_waiting.c
@@ -17,8 +17,13 @@
 */
 
 // Compiler-generated code (emulation)
+#ifdef _WIN64
+typedef long long kmp_intptr_t;
+#else
 typedef long kmp_intptr_t;
+#endif
 typedef int kmp_int32;
+typedef unsigned char kmp_uint8;
 
 typedef char bool;
 
@@ -40,10 +45,17 @@ typedef struct ident {
 typedef struct kmp_depend_info {
      kmp_intptr_t               base_addr;
      size_t                     len;
-     struct {
-         bool                   in:1;
-         bool                   out:1;
-     } flags;
+     union {
+        kmp_uint8 flag; // flag as an unsigned char
+        struct { // flag as a set of 8 bits
+            unsigned in : 1;
+            unsigned out : 1;
+            unsigned mtx : 1;
+            unsigned set : 1;
+            unsigned unused : 3;
+            unsigned all : 1;
+        } flags;
+    };
 } kmp_depend_info_t;
 
 struct kmp_task;
@@ -100,8 +112,8 @@ int main()
         my_sleep( 0.1 );
     }
 */
-    kmp_depend_info_t dep_info;
-    dep_info.base_addr = (long) &dep;
+    kmp_depend_info_t dep_info = { 0 };
+    dep_info.base_addr = (kmp_intptr_t) &dep;
     dep_info.len = sizeof(int);
     // out = inout per spec and runtime expects this
     dep_info.flags.in = 1;
-- 
2.25.1

