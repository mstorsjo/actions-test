From 07bcbd354e54e54915401f8ea651066aba75c3ac Mon Sep 17 00:00:00 2001
From: zhanglimin <zhanglimin@loongson.cn>
Date: Wed, 5 Apr 2023 10:00:12 +0300
Subject: [PATCH 15/21] [libunwind][test] Add test to check for unw_resume()

This is here for local unwinding, which unw_resume() restores
the machine state and then directly resumes execution in the
target stack frame.

Reviewed By: wangleiat

Differential Revision: https://reviews.llvm.org/D147371
---
 libunwind/test/unw_resume.pass.cpp | 39 ++++++++++++++++++++++++++++++
 1 file changed, 39 insertions(+)
 create mode 100644 libunwind/test/unw_resume.pass.cpp

diff --git a/libunwind/test/unw_resume.pass.cpp b/libunwind/test/unw_resume.pass.cpp
new file mode 100644
index 000000000000..e652620a4a05
--- /dev/null
+++ b/libunwind/test/unw_resume.pass.cpp
@@ -0,0 +1,39 @@
+// -*- C++ -*-
+//===----------------------------------------------------------------------===//
+//
+// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
+// See https://llvm.org/LICENSE.txt for license information.
+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
+//
+//===----------------------------------------------------------------------===//
+
+// Ensure that unw_resume() resumes execution at the stack frame identified by
+// cursor.
+
+// TODO: Investigate this failure on AIX system.
+// XFAIL: target={{.*}}-aix{{.*}}
+
+// TODO: Figure out why this fails with Memory Sanitizer.
+// XFAIL: msan
+
+// FIXME: The return address register($ra/$r1) is restored with a destroyed base
+// address register($a0/$r4) in the assembly file `UnwindRegistersRestore.S` on
+// LoongArch. And we will fix this issue in the next commit.
+// XFAIL: target={{loongarch64-.+}}
+
+#include <libunwind.h>
+
+void test_unw_resume() {
+  unw_context_t context;
+  unw_cursor_t cursor;
+
+  unw_getcontext(&context);
+  unw_init_local(&cursor, &context);
+  unw_step(&cursor);
+  unw_resume(&cursor);
+}
+
+int main() {
+  test_unw_resume();
+  return 0;
+}
-- 
2.34.1

