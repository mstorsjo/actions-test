From 216168fabb6f123a0c659632cea9c5a164e63f84 Mon Sep 17 00:00:00 2001
From: Jacek Caban <jacek@codeweavers.com>
Date: Sun, 5 May 2024 01:44:25 +0200
Subject: [PATCH 41/55] [LLD][COFF][WIP] Improve weak anti-dependency symbol
 handling.

FIXME: Needs more testing
---
 lld/COFF/InputFiles.cpp | 28 ++++++++++++++++++----------
 lld/COFF/Symbols.h      |  2 ++
 2 files changed, 20 insertions(+), 10 deletions(-)

diff --git a/lld/COFF/InputFiles.cpp b/lld/COFF/InputFiles.cpp
index e46fbe5e51da..91f47b672813 100644
--- a/lld/COFF/InputFiles.cpp
+++ b/lld/COFF/InputFiles.cpp
@@ -78,7 +78,7 @@ std::string lld::toString(const coff::InputFile *file) {
 /// If Source is Undefined and has no weak alias set, makes it a weak
 /// alias to Target.
 static void checkAndSetWeakAlias(COFFTargetContext &targetCtx, InputFile *f,
-                                 Symbol *source, Symbol *target) {
+                                 Symbol *source, Symbol *target, bool isAntiDep) {
   if (auto *u = dyn_cast<Undefined>(source)) {
     if (u->weakAlias && u->weakAlias != target) {
       // Weak aliases as produced by GCC are named in the form
@@ -88,13 +88,19 @@ static void checkAndSetWeakAlias(COFFTargetContext &targetCtx, InputFile *f,
       // this weak symbol.
       if (targetCtx.ctx.config.allowDuplicateWeak)
         return;
-      // FIXME: This should probably check for anti-dependency, needs more
-      // testing
-      if (targetCtx.machine == ARM64EC)
+      // FIXME: Needs more testing
+      if (isAntiDep)
         return;
-      targetCtx.symtab.reportDuplicate(source, f);
+      if (!u->isAntiDep)
+        targetCtx.symtab.reportDuplicate(source, f);
+
+      if (u->ECAlias && isa<Undefined>(u->ECAlias)) {
+        cast<Undefined>(u->ECAlias)->ECAlias = nullptr;
+        u->ECAlias = nullptr;
+      }
     }
     u->weakAlias = target;
+    u->isAntiDep = isAntiDep;
   }
 }
 
@@ -459,7 +465,7 @@ void ObjFile::initializeSymbols() {
   uint32_t numSymbols = coffObj->getNumberOfSymbols();
   symbols.resize(numSymbols);
 
-  SmallVector<std::pair<Symbol *, uint32_t>, 8> weakAliases;
+  SmallVector<std::pair<uint32_t, uint32_t>, 8> weakAliases;
   std::vector<uint32_t> pendingIndexes;
   pendingIndexes.reserve(numSymbols);
 
@@ -514,7 +520,7 @@ void ObjFile::initializeSymbols() {
     } else if (coffSym.isWeakExternal()) {
       symbols[i] = createUndefined(coffSym);
       uint32_t tagIndex = coffSym.getAux<coff_aux_weak_external>()->TagIndex;
-      weakAliases.emplace_back(symbols[i], tagIndex);
+      weakAliases.emplace_back(i, tagIndex);
     } else if (std::optional<Symbol *> optSym =
                    createDefined(coffSym, comdatDefs, prevailingComdat)) {
       symbols[i] = *optSym;
@@ -552,9 +558,11 @@ void ObjFile::initializeSymbols() {
   }
 
   for (auto &kv : weakAliases) {
-    Symbol *sym = kv.first;
+    Symbol *sym = symbols[kv.first];
+    COFFSymbolRef coffSym = check(coffObj->getSymbol(kv.first));
     uint32_t idx = kv.second;
-    checkAndSetWeakAlias(target, this, sym, symbols[idx]);
+    checkAndSetWeakAlias(target, this, sym, symbols[idx],
+                         coffSym.getWeakExternal()->Characteristics == 4);
   }
 
   // Free the memory used by sparseChunks now that symbol loading is finished.
@@ -1259,7 +1267,7 @@ void BitcodeFile::parse() {
       sym = target.symtab.addUndefined(symName, this, true);
       std::string fallback = std::string(objSym.getCOFFWeakExternalFallback());
       Symbol *alias = target.symtab.addUndefined(saver.save(fallback));
-      checkAndSetWeakAlias(target, this, sym, alias);
+      checkAndSetWeakAlias(target, this, sym, alias, false);
     } else if (comdatIndex != -1) {
       if (symName == obj->getComdatTable()[comdatIndex].first) {
         sym = comdat[comdatIndex].first;
diff --git a/lld/COFF/Symbols.h b/lld/COFF/Symbols.h
index a605e6e7175f..6b7030272eb1 100644
--- a/lld/COFF/Symbols.h
+++ b/lld/COFF/Symbols.h
@@ -344,6 +344,8 @@ public:
   // even if they are marked as an anti-dependency).
   Symbol *ECAlias = nullptr;
 
+  bool isAntiDep = false;
+
   bool isECAlias() { return ECAlias != nullptr; }
 
   // If this symbol is external weak, try to resolve it to a defined
-- 
2.25.1

