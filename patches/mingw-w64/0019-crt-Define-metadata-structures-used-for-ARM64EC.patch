From fec532fd7870c6e3506f28fc5292f49ba507b35c Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Thu, 14 Sep 2023 23:36:09 +0100
Subject: [PATCH 19/30] crt: Define metadata structures used for ARM64EC

These are populated by the linker, and then used by the loader and
emulator at runtime to allow for ARM64EC <-> X86_64 interoperability.
---
 mingw-w64-crt/cfguard/mingw_cfguard_loadcfg.S |  8 +-
 mingw-w64-crt/misc/mingw_arm64ec_support.S    | 98 +++++++++++++++++++
 2 files changed, 104 insertions(+), 2 deletions(-)
 create mode 100644 mingw-w64-crt/misc/mingw_arm64ec_support.S

diff --git a/mingw-w64-crt/cfguard/mingw_cfguard_loadcfg.S b/mingw-w64-crt/cfguard/mingw_cfguard_loadcfg.S
index a7028b1a8..161ce18e4 100644
--- a/mingw-w64-crt/cfguard/mingw_cfguard_loadcfg.S
+++ b/mingw-w64-crt/cfguard/mingw_cfguard_loadcfg.S
@@ -7,7 +7,7 @@
 /*
 This assembly source file defines the `_load_config_used` structure, which is
 purely data. The main purpose is to include the metadata necessary for enabling
-Control Flow Guard (CFGuard).
+Control Flow Guard (CFGuard) and ARM64EC.
 
 Many of the symbols referenced here are supplied by the linker. This file has
 been constructed with LLVM/LLD in mind.
@@ -23,7 +23,7 @@ been constructed with LLVM/LLD in mind.
 #  error "Load config structure is unimplemented for the current architecture."
 #endif
 
-#if defined(__x86_64__)
+#if defined(__x86_64__) && !defined(__arm64ec__)
 /*
 GuardCFCheckDispatch is only used on x86_64. For other platforms it should be 0.
 Ref: https://docs.microsoft.com/en-us/windows/win32/secbp/pe-metadata
@@ -99,7 +99,11 @@ SYM(_load_config_used):
 	PTR	SYM(__guard_longjmp_table) /* GuardLongJumpTargetTable */
 	PTR	SYM(__guard_longjmp_count) /* GuardLongJumpTargetCount */
 	PTR	0 /* DynamicValueRelocTable */
+#if defined(__arm64ec__)
+	PTR	SYM(__chpe_metadata) /* CHPEMetadataPointer */
+#else
 	PTR	0 /* CHPEMetadataPointer */
+#endif
 	PTR	0 /* GuardRFFailureRoutine */
 	PTR	0 /* GuardRFFailureRoutineFunctionPointer */
 	.4byte	0 /* DynamicValueRelocTableOffset */
diff --git a/mingw-w64-crt/misc/mingw_arm64ec_support.S b/mingw-w64-crt/misc/mingw_arm64ec_support.S
new file mode 100644
index 000000000..8f64ed5d5
--- /dev/null
+++ b/mingw-w64-crt/misc/mingw_arm64ec_support.S
@@ -0,0 +1,98 @@
+/**
+ * This file has no copyright assigned and is placed in the Public Domain.
+ * This file is part of the mingw-w64 runtime package.
+ * No warranty is given; refer to the file DISCLAIMER.PD within this package.
+ */
+
+#if defined(__arm64ec__)
+
+#define PTR .8byte
+#define ALIGN 16
+#define EXPORT_SYM(x) .globl x; x:
+
+/*
+These symbols are updated at runtime by the dynamic linker to point to emulator
+helper routines.
+*/
+	.section	.00cfg, "dr"
+	.balign ALIGN
+EXPORT_SYM(__os_arm64x_dispatch_call_no_redirect)
+	PTR 0
+EXPORT_SYM(__os_arm64x_dispatch_ret)
+	PTR 0
+EXPORT_SYM(__os_arm64x_check_icall)
+EXPORT_SYM(__os_arm64x_dispatch_icall)
+	PTR 0
+EXPORT_SYM(__os_arm64x_check_call)
+EXPORT_SYM(__os_arm64x_dispatch_call)
+	PTR 0
+EXPORT_SYM(__os_arm64x_check_icall_cfg)
+EXPORT_SYM(__os_arm64x_check_dispatch_cfg)
+	PTR 0
+EXPORT_SYM(__os_arm64x_rdtsc)
+EXPORT_SYM(__os_arm64x_get_x64_information)
+	PTR 0
+EXPORT_SYM(__os_arm64x_set_x64_information)
+EXPORT_SYM(__os_arm64x_cpuidex)
+	PTR 0
+EXPORT_SYM(__os_arm64x_x64_jump)
+EXPORT_SYM(__os_arm64x_dispatch_fptr)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper0)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper1)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper2)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper3)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper4)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper5)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper6)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper7)
+	PTR 0
+EXPORT_SYM(__os_arm64x_helper8)
+	PTR 0
+
+/*
+This structure is read at runtime by the dynamic linker on ARM64EC to configure
+metadata necessary for EC code to interface with x86_64 code.
+*/
+	.section	.rdata,"dr"
+	.balign ALIGN
+EXPORT_SYM(__chpe_metadata)	
+	.4byte 1 /* Version */
+	.4byte __hybrid_code_map@IMGREL /* CodeMap */
+	.4byte __hybrid_code_map_count /* CodeMapCount */
+	.4byte __x64_code_ranges_to_entry_points@IMGREL /* CodeRangesToEntryPoints */
+	.4byte __arm64x_redirection_metadata@IMGREL /* RedirectionMetadata */
+	.4byte __os_arm64x_dispatch_call_no_redirect@IMGREL /* __os_arm64x_dispatch_call_no_redirect */
+	.4byte __os_arm64x_dispatch_ret@IMGREL /* __os_arm64x_dispatch_ret */
+	.4byte __os_arm64x_check_call@IMGREL /* __os_arm64x_dispatch_call */
+	.4byte __os_arm64x_check_icall@IMGREL /* __os_arm64x_dispatch_icall */
+	.4byte __os_arm64x_check_icall_cfg@IMGREL /* __os_arm64x_dispatch_icall_cfg */
+	.4byte __arm64x_native_entrypoint@IMGREL /* AlternateEntryPoint */
+	.4byte __hybrid_auxiliary_iat@IMGREL /* AuxiliaryIAT */
+	.4byte __x64_code_ranges_to_entry_points_count /* CodeRangesToEntryPointsCount */
+	.4byte __arm64x_redirection_metadata_count /* RedirectionMetadataCount */
+	.4byte __os_arm64x_get_x64_information@IMGREL /* GetX64InformationFunctionPointer */
+	.4byte __os_arm64x_set_x64_information@IMGREL /* SetX64InformationFunctionPointer */
+	.4byte __arm64x_extra_rfe_table@IMGREL /* ExtraRFETable */
+	.4byte __arm64x_extra_rfe_table_size /* ExtraRFETableSize */
+	.4byte __os_arm64x_x64_jump@IMGREL /* __os_arm64x_dispatch_fptr */
+	.4byte __hybrid_auxiliary_iat_copy@IMGREL /* AuxiliaryIATCopy */
+	/* The following members are undocumented */
+	.4byte __os_arm64x_helper0@IMGREL
+	.4byte __os_arm64x_helper1@IMGREL
+	.4byte __os_arm64x_helper2@IMGREL
+	.4byte __os_arm64x_helper3@IMGREL
+	.4byte __os_arm64x_helper4@IMGREL
+	.4byte __os_arm64x_helper5@IMGREL
+	.4byte __os_arm64x_helper6@IMGREL
+	.4byte __os_arm64x_helper7@IMGREL
+	.4byte __os_arm64x_helper8@IMGREL
+
+#endif
-- 
2.25.1

