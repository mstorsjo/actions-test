From 2ddb3899bb981091b8362470b2264fddbf59a0f3 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Thu, 14 Sep 2023 21:11:39 +0100
Subject: [PATCH 12/29] math: Use aarch64 function variants for ARM64EC

---
 mingw-w64-crt/math/arm-common/acoshl.c     |  3 ++-
 mingw-w64-crt/math/arm-common/asinhl.c     |  3 ++-
 mingw-w64-crt/math/arm-common/atanhl.c     |  3 ++-
 mingw-w64-crt/math/arm-common/expm1l.c     |  3 ++-
 mingw-w64-crt/math/arm-common/ilogbl.c     |  3 ++-
 mingw-w64-crt/math/arm-common/ldexpl.c     |  3 ++-
 mingw-w64-crt/math/arm-common/log1pl.c     |  3 ++-
 mingw-w64-crt/math/arm-common/log2.c       |  3 ++-
 mingw-w64-crt/math/arm-common/logbl.c      |  3 ++-
 mingw-w64-crt/math/arm-common/powl.c       |  3 ++-
 mingw-w64-crt/math/arm-common/remainderl.c |  3 ++-
 mingw-w64-crt/math/arm-common/remquol.c    |  3 ++-
 mingw-w64-crt/math/arm-common/scalbn.c     |  6 ++++--
 mingw-w64-crt/math/cephes_mconf.h          |  6 ++++--
 mingw-w64-crt/math/coshl.c                 |  3 ++-
 mingw-w64-crt/math/erfl.c                  |  3 ++-
 mingw-w64-crt/math/fabsl.c                 | 10 +++++++---
 mingw-w64-crt/math/fma.c                   |  5 +++--
 mingw-w64-crt/math/fmaf.c                  |  5 +++--
 mingw-w64-crt/math/fmal.c                  |  6 ++++--
 mingw-w64-crt/math/fp_constsl.c            |  3 ++-
 mingw-w64-crt/math/fpclassifyl.c           |  5 +++--
 mingw-w64-crt/math/frexpl.c                |  6 ++++--
 mingw-w64-crt/math/isnanl.c                |  7 ++++---
 mingw-w64-crt/math/lgammal.c               |  3 ++-
 mingw-w64-crt/math/llrint.c                |  2 +-
 mingw-w64-crt/math/llrintf.c               |  2 +-
 mingw-w64-crt/math/llrintl.c               |  3 ++-
 mingw-w64-crt/math/lrint.c                 |  6 +++---
 mingw-w64-crt/math/lrintf.c                |  6 +++---
 mingw-w64-crt/math/lrintl.c                |  5 +++--
 mingw-w64-crt/math/modf.c                  |  2 +-
 mingw-w64-crt/math/modff.c                 |  2 +-
 mingw-w64-crt/math/modfl.c                 |  2 +-
 mingw-w64-crt/math/rintl.c                 |  2 +-
 mingw-w64-crt/math/signbitl.c              |  4 ++--
 mingw-w64-crt/math/sinhl.c                 |  3 ++-
 mingw-w64-crt/math/sqrt.def.h              |  5 +++--
 mingw-w64-crt/math/tgammal.c               |  2 +-
 mingw-w64-crt/math/truncl.c                |  6 ++++--
 40 files changed, 97 insertions(+), 59 deletions(-)

diff --git a/mingw-w64-crt/math/arm-common/acoshl.c b/mingw-w64-crt/math/arm-common/acoshl.c
index c2157bebc..a575b9e4e 100644
--- a/mingw-w64-crt/math/arm-common/acoshl.c
+++ b/mingw-w64-crt/math/arm-common/acoshl.c
@@ -8,7 +8,8 @@
 
 long double acoshl(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return acosh(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/asinhl.c b/mingw-w64-crt/math/arm-common/asinhl.c
index 556b3c4f5..467140702 100644
--- a/mingw-w64-crt/math/arm-common/asinhl.c
+++ b/mingw-w64-crt/math/arm-common/asinhl.c
@@ -8,7 +8,8 @@
 
 long double asinhl(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return asinh(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/atanhl.c b/mingw-w64-crt/math/arm-common/atanhl.c
index c4d124b9f..0edbe6bca 100644
--- a/mingw-w64-crt/math/arm-common/atanhl.c
+++ b/mingw-w64-crt/math/arm-common/atanhl.c
@@ -8,7 +8,8 @@
 
 long double atanhl(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return atanh(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/expm1l.c b/mingw-w64-crt/math/arm-common/expm1l.c
index baf4da23a..719c12e18 100644
--- a/mingw-w64-crt/math/arm-common/expm1l.c
+++ b/mingw-w64-crt/math/arm-common/expm1l.c
@@ -8,7 +8,8 @@
 
 long double expm1l(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return expm1(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/ilogbl.c b/mingw-w64-crt/math/arm-common/ilogbl.c
index 1a6865d46..b846efe78 100644
--- a/mingw-w64-crt/math/arm-common/ilogbl.c
+++ b/mingw-w64-crt/math/arm-common/ilogbl.c
@@ -8,7 +8,8 @@
 
 int ilogbl(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return ilogb(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/ldexpl.c b/mingw-w64-crt/math/arm-common/ldexpl.c
index 2c2a9e51a..0f37cf2d8 100644
--- a/mingw-w64-crt/math/arm-common/ldexpl.c
+++ b/mingw-w64-crt/math/arm-common/ldexpl.c
@@ -8,7 +8,8 @@
 
 long double ldexpl(long double x, int n)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return ldexp(x, n);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/log1pl.c b/mingw-w64-crt/math/arm-common/log1pl.c
index c2b321a26..ed256c5af 100644
--- a/mingw-w64-crt/math/arm-common/log1pl.c
+++ b/mingw-w64-crt/math/arm-common/log1pl.c
@@ -8,7 +8,8 @@
 
 long double log1pl(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return log1p(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/log2.c b/mingw-w64-crt/math/arm-common/log2.c
index 42ae3eeeb..ae305c00f 100644
--- a/mingw-w64-crt/math/arm-common/log2.c
+++ b/mingw-w64-crt/math/arm-common/log2.c
@@ -47,7 +47,8 @@ float log2f(float x)
 
 long double log2l(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return log2(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/logbl.c b/mingw-w64-crt/math/arm-common/logbl.c
index fca06754d..1ee0ce1c7 100644
--- a/mingw-w64-crt/math/arm-common/logbl.c
+++ b/mingw-w64-crt/math/arm-common/logbl.c
@@ -8,7 +8,8 @@
 
 long double logbl(long double x)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return logb(x);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/powl.c b/mingw-w64-crt/math/arm-common/powl.c
index 46e6b2d45..bb6c41ed7 100644
--- a/mingw-w64-crt/math/arm-common/powl.c
+++ b/mingw-w64-crt/math/arm-common/powl.c
@@ -8,7 +8,8 @@
 
 long double powl(long double x, long double y)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return pow(x, y);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/remainderl.c b/mingw-w64-crt/math/arm-common/remainderl.c
index 16fef9465..b59346728 100644
--- a/mingw-w64-crt/math/arm-common/remainderl.c
+++ b/mingw-w64-crt/math/arm-common/remainderl.c
@@ -9,7 +9,8 @@
 
 long double remainderl(long double x, long double y)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+  defined(__arm64ec__) || defined(_ARM64EC_)
   return remainder(x, y);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/remquol.c b/mingw-w64-crt/math/arm-common/remquol.c
index c9fb1cbb5..d365c4023 100644
--- a/mingw-w64-crt/math/arm-common/remquol.c
+++ b/mingw-w64-crt/math/arm-common/remquol.c
@@ -9,7 +9,8 @@
 
 long double remquol(long double x, long double y, int *quo)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return remquo(x, y, quo);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/arm-common/scalbn.c b/mingw-w64-crt/math/arm-common/scalbn.c
index 0e2f14ab7..692f557d1 100644
--- a/mingw-w64-crt/math/arm-common/scalbn.c
+++ b/mingw-w64-crt/math/arm-common/scalbn.c
@@ -18,7 +18,8 @@ float scalbnf(float x, int exp)
 
 long double scalbnl(long double x, int exp)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return scalbn(x, exp);
 #else
 #error Not supported on your platform yet
@@ -37,7 +38,8 @@ float scalblnf(float x, long exp)
 
 long double scalblnl(long double x, long exp)
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return scalbln(x, exp);
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/cephes_mconf.h b/mingw-w64-crt/math/cephes_mconf.h
index f502f187b..9dec43d86 100644
--- a/mingw-w64-crt/math/cephes_mconf.h
+++ b/mingw-w64-crt/math/cephes_mconf.h
@@ -66,7 +66,8 @@ extern double __QNAN;
 #endif
 
 /*long double*/
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
 #define MAXNUML	1.7976931348623158E308
 #define MAXLOGL	7.09782712893383996843E2
 #define MINLOGL	-7.08396418532264106224E2
@@ -84,7 +85,8 @@ extern double __QNAN;
 #define PIL	3.1415926535897932384626L
 #define PIO2L	1.5707963267948966192313L
 #define PIO4L	7.8539816339744830961566E-1L
-#endif /* defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) */
+#endif /* defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+          defined(__arm64ec__) || defined(_ARM64EC_) */
 
 #define isfinitel isfinite
 #define isinfl isinf
diff --git a/mingw-w64-crt/math/coshl.c b/mingw-w64-crt/math/coshl.c
index c5aaa73ec..bc89a3bcd 100644
--- a/mingw-w64-crt/math/coshl.c
+++ b/mingw-w64-crt/math/coshl.c
@@ -5,7 +5,8 @@
  */
 #include "cephes_mconf.h"
 
-#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)
+#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+    defined(_ARM64EC_) || defined(__arm64ec__)
 #include <math.h>
 
 long double coshl(long double x)
diff --git a/mingw-w64-crt/math/erfl.c b/mingw-w64-crt/math/erfl.c
index 1408cf542..a3c8801c6 100644
--- a/mingw-w64-crt/math/erfl.c
+++ b/mingw-w64-crt/math/erfl.c
@@ -108,7 +108,8 @@ Copyright 1984, 1995 by Stephen L. Moshier
 
 long double erfl(long double x);
 
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
 long double erfcl(long double x)
 {
 	return erfc(x);
diff --git a/mingw-w64-crt/math/fabsl.c b/mingw-w64-crt/math/fabsl.c
index 1df48cfa9..fc7112cd0 100644
--- a/mingw-w64-crt/math/fabsl.c
+++ b/mingw-w64-crt/math/fabsl.c
@@ -8,11 +8,15 @@ long double fabsl (long double x);
 long double
 fabsl (long double x)
 {
-#if defined(__x86_64__) || defined(_AMD64_) || defined(__i386__) || defined(_X86_)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__)
+  return __builtin_fabsf (x);
   long double res = 0.0L;
   asm volatile ("fabs;" : "=t" (res) : "0" (x));
   return res;
-#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+  defined(__arm64ec__) || defined(_ARM64EC_)
   return __builtin_fabsl (x);
-#endif /* defined(__x86_64__) || defined(_AMD64_) || defined(__i386__) || defined(_X86_) */
+#endif /* (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) ||
+          defined(_X86_) || defined(__i386__) */
 }
diff --git a/mingw-w64-crt/math/fma.c b/mingw-w64-crt/math/fma.c
index 6774be787..8844aa499 100644
--- a/mingw-w64-crt/math/fma.c
+++ b/mingw-w64-crt/math/fma.c
@@ -17,7 +17,7 @@ double fma(double x, double y, double z){
   return z;
 }
 
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
 
 /* Use hardware FMA on ARM64. */
 double fma(double x, double y, double z){
@@ -29,7 +29,8 @@ double fma(double x, double y, double z){
   return z;
 }
 
-#elif defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#elif (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__)
 
 #include <math.h>
 #include <stdint.h>
diff --git a/mingw-w64-crt/math/fmaf.c b/mingw-w64-crt/math/fmaf.c
index 4661e4b82..411bf5bcc 100644
--- a/mingw-w64-crt/math/fmaf.c
+++ b/mingw-w64-crt/math/fmaf.c
@@ -17,7 +17,7 @@ float fmaf(float x, float y, float z){
   return z;
 }
 
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
 
 /* Use hardware FMA on ARM64. */
 float fmaf(float x, float y, float z){
@@ -29,7 +29,8 @@ float fmaf(float x, float y, float z){
   return z;
 }
 
-#elif defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#elif (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__)
 
 #include <math.h>
 #include <stdint.h>
diff --git a/mingw-w64-crt/math/fmal.c b/mingw-w64-crt/math/fmal.c
index 67e5c503a..0e9b217dd 100644
--- a/mingw-w64-crt/math/fmal.c
+++ b/mingw-w64-crt/math/fmal.c
@@ -5,7 +5,8 @@
  */
 long double fmal(long double x, long double y, long double z);
 
-#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)
+#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__)
 
 double fma(double x, double y, double z);
 
@@ -14,7 +15,8 @@ long double fmal(long double x, long double y, long double z){
   return fma(x, y, z);
 }
 
-#elif defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#elif (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__)
 
 /**
  * x87-specific software-emulated FMA by LH_Mouse (lh_mouse at 126 dot com).
diff --git a/mingw-w64-crt/math/fp_constsl.c b/mingw-w64-crt/math/fp_constsl.c
index 880408209..6587190a4 100644
--- a/mingw-w64-crt/math/fp_constsl.c
+++ b/mingw-w64-crt/math/fp_constsl.c
@@ -16,7 +16,8 @@ const union _ieee_rep __DENORML = { __LONG_DOUBLE_DENORM_REP };
 long double nanl (const char *);
 long double nanl (const char * tagp __attribute__((unused)) )
 {
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
   return nan("");
 #else
   return __QNANL.ldouble_val;
diff --git a/mingw-w64-crt/math/fpclassifyl.c b/mingw-w64-crt/math/fpclassifyl.c
index 3ee487e13..0e11d0b61 100644
--- a/mingw-w64-crt/math/fpclassifyl.c
+++ b/mingw-w64-crt/math/fpclassifyl.c
@@ -6,7 +6,7 @@
 #include <math.h>
 
 int __fpclassifyl (long double _x){
-#if defined(__x86_64__) || defined(_AMD64_)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
     __mingw_ldbl_type_t hlp;
     unsigned int e;
     hlp.x = _x;
@@ -23,7 +23,8 @@ int __fpclassifyl (long double _x){
       return (((hlp.lh.high & 0x7fffffff) | hlp.lh.low) == 0 ?
 	      FP_INFINITE : FP_NAN);
     return FP_NORMAL;
-#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+    defined(__arm64ec__) || defined(_ARM64EC_)
     return __fpclassify(_x);
 #elif defined(__i386__) || defined(_X86_)
   unsigned short sw;
diff --git a/mingw-w64-crt/math/frexpl.c b/mingw-w64-crt/math/frexpl.c
index f686a7463..a617d6b02 100644
--- a/mingw-w64-crt/math/frexpl.c
+++ b/mingw-w64-crt/math/frexpl.c
@@ -5,7 +5,8 @@
  */
 long double frexpl(long double value, int* exp);
 
-#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)
+#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__)
 
 double frexp(double value, int* exp);
 
@@ -15,7 +16,8 @@ long double frexpl(long double value, int* exp)
   return frexp(value, exp);
 }
 
-#elif defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#elif (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__)
 
 #include <stdint.h>
 
diff --git a/mingw-w64-crt/math/isnanl.c b/mingw-w64-crt/math/isnanl.c
index ff4ca6e42..9b3fe2140 100644
--- a/mingw-w64-crt/math/isnanl.c
+++ b/mingw-w64-crt/math/isnanl.c
@@ -8,7 +8,7 @@
 int
 __isnanl (long double _x)
 {
-#if defined(__x86_64__) || defined(_AMD64_)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
   __mingw_ldbl_type_t ld;
   int xx, signexp;
 
@@ -18,8 +18,9 @@ __isnanl (long double _x)
   signexp |= (unsigned int) (xx | (-xx)) >> 31;
   signexp = 0xfffe - signexp;
   return (int) ((unsigned int) signexp) >> 16;
-#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
-    return __isnan(_x);
+#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+  defined(__arm64ec__) || defined(_ARM64EC_)
+  return __isnan(_x);
 #elif defined(__i386__) || defined(_X86_)
   unsigned short _sw;
   __asm__ __volatile__ ("fxam;"
diff --git a/mingw-w64-crt/math/lgammal.c b/mingw-w64-crt/math/lgammal.c
index 998c6a90d..d06df7a8b 100644
--- a/mingw-w64-crt/math/lgammal.c
+++ b/mingw-w64-crt/math/lgammal.c
@@ -5,7 +5,8 @@
  */
 #include "cephes_mconf.h"
 
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || \
+  defined(__arm64ec__) || defined(_ARM64EC_)
 double lgamma(double x);
 
 long double lgammal(long double x)
diff --git a/mingw-w64-crt/math/llrint.c b/mingw-w64-crt/math/llrint.c
index 4ba7af7e6..6b8b02a60 100644
--- a/mingw-w64-crt/math/llrint.c
+++ b/mingw-w64-crt/math/llrint.c
@@ -9,7 +9,7 @@
 long long llrint (double x) 
 {
   long long retval = 0ll;
-#if defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || defined(_X86_) || defined(__i386__)
   __asm__ __volatile__ ("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
 #else
   int mode = fegetround();
diff --git a/mingw-w64-crt/math/llrintf.c b/mingw-w64-crt/math/llrintf.c
index e8085ec4e..38f7c3c2f 100644
--- a/mingw-w64-crt/math/llrintf.c
+++ b/mingw-w64-crt/math/llrintf.c
@@ -9,7 +9,7 @@
 long long llrintf (float x) 
 {
   long long retval = 0ll;
-#if defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || defined(_X86_) || defined(__i386__)
   __asm__ __volatile__ ("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
 #else
   int mode = fegetround();
diff --git a/mingw-w64-crt/math/llrintl.c b/mingw-w64-crt/math/llrintl.c
index 6a2bf73d8..a264b333a 100644
--- a/mingw-w64-crt/math/llrintl.c
+++ b/mingw-w64-crt/math/llrintl.c
@@ -9,7 +9,8 @@
 long long llrintl (long double x) 
 {
   long long retval = 0ll;
-#if defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__) 
   __asm__ __volatile__ ("fistpll %0"  : "=m" (retval) : "t" (x) : "st");
 #else
   int mode = fegetround();
diff --git a/mingw-w64-crt/math/lrint.c b/mingw-w64-crt/math/lrint.c
index 7831446be..4e4caa86e 100644
--- a/mingw-w64-crt/math/lrint.c
+++ b/mingw-w64-crt/math/lrint.c
@@ -5,14 +5,14 @@
  */
 #include <math.h>
 
-#if defined(_AMD64_) || defined(__x86_64__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
 #include <xmmintrin.h>
 #endif
 
 long lrint (double x) 
 {
   long retval = 0L;
-#if defined(_AMD64_) || defined(__x86_64__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
   retval = _mm_cvtsd_si32(_mm_load_sd(&x));
 #elif defined(_X86_) || defined(__i386__)
   __asm__ __volatile__ ("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
@@ -22,7 +22,7 @@ long lrint (double x)
     "vcvtr.s32.f64    %[tmp], %[src]\n\t"
     "fmrs             %[dst], %[tmp]\n\t"
     : [dst] "=r" (retval), [tmp] "=t" (temp) : [src] "w" (x));
-#elif defined(__aarch64__) || defined(_ARM64_)
+#elif defined(__aarch64__) || defined(_ARM64_) || defined(__arm64ec__) || defined(_ARM64EC_)
   __asm__ __volatile__ (
     "frintx %d1, %d1\n\t"
     "fcvtzs %w0, %d1\n\t"
diff --git a/mingw-w64-crt/math/lrintf.c b/mingw-w64-crt/math/lrintf.c
index 1e8902f03..5b3533ede 100644
--- a/mingw-w64-crt/math/lrintf.c
+++ b/mingw-w64-crt/math/lrintf.c
@@ -5,14 +5,14 @@
  */
 #include <math.h>
 
-#if defined(_AMD64_) || defined(__x86_64__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
 #include <xmmintrin.h>
 #endif
 
 long lrintf (float x) 
 {
   long retval = 0l;
-#if defined(_AMD64_) || defined(__x86_64__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
   retval = _mm_cvtss_si32(_mm_load_ss(&x));
 #elif defined(_X86_) || defined(__i386__)
   __asm__ __volatile__ ("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
@@ -21,7 +21,7 @@ long lrintf (float x)
     "vcvtr.s32.f32    %[src], %[src]\n\t"
     "fmrs             %[dst], %[src]\n\t"
     : [dst] "=r" (retval), [src] "+w" (x));
-#elif defined(__aarch64__) || defined(_ARM64_)
+#elif defined(__aarch64__) || defined(_ARM64_) || defined(__arm64ec__) || defined(_ARM64EC_)
   __asm__ __volatile__ (
     "frintx %s1, %s1\n\t"
     "fcvtzs %w0, %s1\n\t"
diff --git a/mingw-w64-crt/math/lrintl.c b/mingw-w64-crt/math/lrintl.c
index d710fac05..cacdf2005 100644
--- a/mingw-w64-crt/math/lrintl.c
+++ b/mingw-w64-crt/math/lrintl.c
@@ -8,9 +8,10 @@
 long lrintl (long double x) 
 {
   long retval = 0l;
-#if defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__)
   __asm__ __volatile__ ("fistpl %0"  : "=m" (retval) : "t" (x) : "st");
-#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || defined(__arm64ec__) || defined(_ARM64EC_)
     retval = lrint(x);
 #endif
   return retval;
diff --git a/mingw-w64-crt/math/modf.c b/mingw-w64-crt/math/modf.c
index d2623095c..bf541fad2 100644
--- a/mingw-w64-crt/math/modf.c
+++ b/mingw-w64-crt/math/modf.c
@@ -12,7 +12,7 @@ modf (double value, double* iptr)
 {
   double int_part = 0.0;
   /* truncate */
-#if defined(_AMD64_) || defined(__x86_64__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
   asm volatile ("subq $8, %%rsp\n"
     "fnstcw 4(%%rsp)\n"
     "movzwl 4(%%rsp), %%eax\n"
diff --git a/mingw-w64-crt/math/modff.c b/mingw-w64-crt/math/modff.c
index dcf19cfed..d2f8514d4 100644
--- a/mingw-w64-crt/math/modff.c
+++ b/mingw-w64-crt/math/modff.c
@@ -13,7 +13,7 @@ modff (float value, float* iptr)
   float int_part = 0.0F;
   /* truncate */ 
   /* truncate */
-#if defined(_AMD64_) || defined(__x86_64__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
   asm volatile ("subq $8, %%rsp\n"
     "fnstcw 4(%%rsp)\n"
     "movzwl 4(%%rsp), %%eax\n"
diff --git a/mingw-w64-crt/math/modfl.c b/mingw-w64-crt/math/modfl.c
index 33593e6de..60b9b81b9 100644
--- a/mingw-w64-crt/math/modfl.c
+++ b/mingw-w64-crt/math/modfl.c
@@ -12,7 +12,7 @@ modfl (long double value, long double* iptr)
 {
   long double int_part = 0.0L;
   /* truncate */
-#if defined(_AMD64_) || defined(__x86_64__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
   asm volatile ("subq $8, %%rsp\n"
     "fnstcw 4(%%rsp)\n"
     "movzwl 4(%%rsp), %%eax\n"
diff --git a/mingw-w64-crt/math/rintl.c b/mingw-w64-crt/math/rintl.c
index 1c3780330..b3cc8e9e7 100644
--- a/mingw-w64-crt/math/rintl.c
+++ b/mingw-w64-crt/math/rintl.c
@@ -7,7 +7,7 @@
 
 long double rintl (long double x) {
   long double retval = 0.0L;
-#if defined(_AMD64_) || defined(__x86_64__) || defined(_X86_) || defined(__i386__)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || defined(_X86_) || defined(__i386__)
   __asm__ __volatile__ ("frndint;": "=t" (retval) : "0" (x));
 #elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
     retval = rint(x);
diff --git a/mingw-w64-crt/math/signbitl.c b/mingw-w64-crt/math/signbitl.c
index 19f2938db..b4dba713b 100644
--- a/mingw-w64-crt/math/signbitl.c
+++ b/mingw-w64-crt/math/signbitl.c
@@ -9,11 +9,11 @@
 
 
 int __signbitl (long double x) {
-#if defined(__x86_64__) || defined(_AMD64_)
+#if (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__))
     __mingw_ldbl_type_t ld;
     ld.x = x;
     return ((ld.lh.sign_exponent & 0x8000) != 0);
-#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#elif defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || defined(__arm64ec__) || defined(_ARM64EC_)
     return __signbit(x);
 #elif defined(__i386__) || defined(_X86_)
   unsigned short sw;
diff --git a/mingw-w64-crt/math/sinhl.c b/mingw-w64-crt/math/sinhl.c
index aa6f0a9c3..0be21febe 100644
--- a/mingw-w64-crt/math/sinhl.c
+++ b/mingw-w64-crt/math/sinhl.c
@@ -6,7 +6,8 @@
 #include "cephes_mconf.h"
 #include <errno.h>
 
-#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)
+#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__)
 #include <math.h>
 
 long double sinhl(long double x)
diff --git a/mingw-w64-crt/math/sqrt.def.h b/mingw-w64-crt/math/sqrt.def.h
index ed1e663ba..8219c27ac 100644
--- a/mingw-w64-crt/math/sqrt.def.h
+++ b/mingw-w64-crt/math/sqrt.def.h
@@ -77,13 +77,14 @@ __FLT_ABI (sqrt) (__FLT_TYPE x)
 #else
   asm volatile ("fsqrtd %[dst], %[src];\n" : [dst] "=w" (res) : [src] "w" (x));
 #endif
-#elif defined(__aarch64__) || defined(_ARM64_)
+#elif defined(__aarch64__) || defined(_ARM64_) || defined(__arm64ec__) || defined(_ARM64EC_)
 #if _NEW_COMPLEX_FLOAT
   asm volatile ("fsqrt %s[dst], %s[src]\n" : [dst] "=w" (res) : [src] "w" (x));
 #else
   asm volatile ("fsqrt %d[dst], %d[src]\n" : [dst] "=w" (res) : [src] "w" (x));
 #endif
-#elif defined(_X86_) || defined(__i386__) || defined(_AMD64_) || defined(__x86_64__)
+#elif (defined(_AMD64_) && !defined(_ARM64EC_)) || (defined(__x86_64__) && !defined(__arm64ec__)) || \
+  defined(_X86_) || defined(__i386__) || 
   asm volatile ("fsqrt" : "=t" (res) : "0" (x));
 #else
 #error Not supported on your platform yet
diff --git a/mingw-w64-crt/math/tgammal.c b/mingw-w64-crt/math/tgammal.c
index 1c7d4ea94..f38b186d6 100644
--- a/mingw-w64-crt/math/tgammal.c
+++ b/mingw-w64-crt/math/tgammal.c
@@ -5,7 +5,7 @@
  */
 #include "cephes_mconf.h"
 
-#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_)
+#if defined(__arm__) || defined(_ARM_) || defined(__aarch64__) || defined(_ARM64_) || defined(__arm64ec__) || defined(_ARM64EC_)
 double tgamma(double x);
 
 long double tgammal(long double x)
diff --git a/mingw-w64-crt/math/truncl.c b/mingw-w64-crt/math/truncl.c
index 3b47e53d1..53d79fae3 100644
--- a/mingw-w64-crt/math/truncl.c
+++ b/mingw-w64-crt/math/truncl.c
@@ -9,7 +9,8 @@
 long double
 truncl (long double _x)
 {
-#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)
+#if defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__)
   return trunc(_x);
 #else
   long double retval = 0.0L;
@@ -22,5 +23,6 @@ truncl (long double _x)
   __asm__ __volatile__ ("frndint;" : "=t" (retval)  : "0" (_x)); /* round towards zero */
   __asm__ __volatile__ ("fldcw %0;" : : "m" (saved_cw) ); /* restore saved control word */
   return retval;
-#endif /* defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) */
+#endif /* defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__) */
 }
-- 
2.25.1

