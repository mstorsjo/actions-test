From b9a10599988ea8a82709529592976efd56242151 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Thu, 14 Sep 2023 23:22:46 +0100
Subject: [PATCH 17/29] WIP: setjmp: Add ARM64EC setjmp/longjmp variants

I haven't quite figured out how __os_arm64x_set_x64_information needs to
be used, hence WIP.
---
 mingw-w64-crt/misc/longjmp.S | 19 ++++++++++++++++++-
 mingw-w64-crt/misc/setjmp.S  | 31 ++++++++++++++++++++++++++++++-
 2 files changed, 48 insertions(+), 2 deletions(-)

diff --git a/mingw-w64-crt/misc/longjmp.S b/mingw-w64-crt/misc/longjmp.S
index 7026ed575..5d40a76bc 100644
--- a/mingw-w64-crt/misc/longjmp.S
+++ b/mingw-w64-crt/misc/longjmp.S
@@ -20,7 +20,7 @@ __MINGW_USYMBOL(longjmp):
         movl    16(%ecx),%esp        /* jmp_buf.Esp */
         addl    $4,%esp              /* get rid of return address */
         jmp     *20(%ecx)            /* jmp_buf.Eip */
-#elif defined(__x86_64__)
+#elif defined(__x86_64__) && !defined(__arm64ec__)
         movq    %rdx,%rax            /* retval */
         movq    0x8(%rcx),%rbx       /* jmp_buf->Rbx */
         movq    0x18(%rcx),%rbp      /* jmp_buf->Rbp */
@@ -88,6 +88,23 @@ __MINGW_USYMBOL(longjmp):
         ldp     d14, d15, [x0, #0xb0] /* jmp_buf->D[6-7] */
         mov     x0,  x1               /* retval */
         ret
+#elif defined(__arm64ec__)
+        ldp     x27, x2,  [x0, #0x08] /* jmp_buf->Rbx, jmp_buf->Rsp */
+        mov     sp,  x2
+        ldp     fp,  x25, [x0, #0x18] /* jmp_buf->Rbp, jmp_buf->Rsi */
+        ldp     x26, x19, [x0, #0x28] /* jmp_buf->Rdi, jmp_buf->R12 */
+        ldp     x20, x21, [x0, #0x38] /* jmp_buf->R13, jmp_buf->R14 */
+        ldp     x22, lr,  [x0, #0x48] /* jmp_buf->R15, jmp_buf->Rip */
+
+        /* TODO: MXCSR */
+
+        ldp     q6,  q7,  [x0, #0x60] /* jmp_buf->Xmm[6-7] */
+        ldp     q8,  q9,  [x0, #0x80] /* jmp_buf->Xmm[8-9] */
+        ldp     q10, q11, [x0, #0xa0] /* jmp_buf->Xmm[10-11] */
+        ldp     q12, q13, [x0, #0xc0] /* jmp_buf->Xmm[12-13] */
+        ldp     q14, q15, [x0, #0xf0] /* jmp_buf->Xmm[14-15] */
+        mov     x0,  x1               /* retval */
+        ret
 #endif
 
         .data
diff --git a/mingw-w64-crt/misc/setjmp.S b/mingw-w64-crt/misc/setjmp.S
index 0c06b8632..01d02cadb 100644
--- a/mingw-w64-crt/misc/setjmp.S
+++ b/mingw-w64-crt/misc/setjmp.S
@@ -30,7 +30,7 @@ __MINGW_USYMBOL(__intrinsic_setjmp):
         xorl    %eax, %eax
         retl
 
-#elif defined(__x86_64__)
+#elif defined(__x86_64__) && !defined(__arm64ec__)
         .globl  __MINGW_USYMBOL(setjmp)
         .def    __MINGW_USYMBOL(setjmp); .scl 2; .type 32; .endef
 __MINGW_USYMBOL(setjmp):
@@ -114,4 +114,33 @@ __MINGW_USYMBOL(__intrinsic_setjmpex):
         stp     d14, d15, [x0, #0xb0] /* jmp_buf->D[6-7] */
         mov     x0,  #0
         ret
+#elif defined(__arm64ec__)
+__MINGW_USYMBOL(__intrinsic_setjmp):
+        mov     x1,  #0
+__MINGW_USYMBOL(__intrinsic_setjmpex):
+        stp     x1,  x27, [x0]        /* jmp_buf->Frame, jmp_buf->Rbx */
+        mov     x2,  sp
+        stp     x2,  fp,  [x0, #0x10] /* jmp_buf->Rsp, jmp_buf->Rbp */
+        stp     x25, x26, [x0, #0x20] /* jmp_buf->Rsi, jmp_buf->Rdi */
+        stp     x19, x20, [x0, #0x30] /* jmp_buf->R12, jmp_buf->R13 */
+        stp     x21, x22, [x0, #0x40] /* jmp_buf->R14, jmp_buf->R15 */
+        str     lr,  [x0, #0x50]      /* jmp_buf->Rip */
+        stp     x0,  lr,  [sp, #-0x10]!
+        add     x1,  x0,  #0x58 /* jmp_buf->MxCsr */
+        mov     x0,  #0
+        mov     x2,  #0
+        blr     =__os_arm64x_get_x64_information /* (0, &jmp_buf->MxCsr, NULL) */
+        ldr     x1,  [sp]
+        add     x1,  x1,  #0x5c /* jmp_buf->FpCsr */
+        mov     x0,  #2
+        mov     x2,  #0
+        blr     =__os_arm64x_get_x64_information /* (2, &jmp_buf->FpCsr, NULL) */
+        ldp     x0,  lr,  [sp], #0x10
+        stp     q6,  q7,  [x0, #0x60] /* jmp_buf->Xmm[6-7] */
+        stp     q8,  q9,  [x0, #0x80] /* jmp_buf->Xmm[8-9] */
+        stp     q10, q11, [x0, #0xa0] /* jmp_buf->Xmm[10-11] */
+        stp     q12, q13, [x0, #0xc0] /* jmp_buf->Xmm[12-13] */
+        stp     q14, q15, [x0, #0xf0] /* jmp_buf->Xmm[14-15] */
+        mov     x0,  #0
+        ret
 #endif
-- 
2.25.1

