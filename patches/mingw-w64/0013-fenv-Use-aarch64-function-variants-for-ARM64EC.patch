From 8b9b288d2cbae4a6582743078302ec824ece4ae6 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Thu, 14 Sep 2023 21:32:45 +0100
Subject: [PATCH 13/29] fenv: Use aarch64 function variants for ARM64EC

---
 mingw-w64-crt/misc/feclearexcept.c   | 8 +++++---
 mingw-w64-crt/misc/fegetenv.c        | 8 +++++---
 mingw-w64-crt/misc/fegetexceptflag.c | 8 +++++---
 mingw-w64-crt/misc/fegetround.c      | 2 +-
 mingw-w64-crt/misc/feholdexcept.c    | 4 ++--
 mingw-w64-crt/misc/feraiseexcept.c   | 4 ++--
 mingw-w64-crt/misc/fesetenv.c        | 8 +++++---
 mingw-w64-crt/misc/fesetexceptflag.c | 8 +++++---
 mingw-w64-crt/misc/fesetround.c      | 8 +++++---
 mingw-w64-crt/misc/fetestexcept.c    | 8 +++++---
 10 files changed, 40 insertions(+), 26 deletions(-)

diff --git a/mingw-w64-crt/misc/feclearexcept.c b/mingw-w64-crt/misc/feclearexcept.c
index 673528b20..55c8fc33f 100644
--- a/mingw-w64-crt/misc/feclearexcept.c
+++ b/mingw-w64-crt/misc/feclearexcept.c
@@ -5,7 +5,8 @@
  */
 #include <fenv.h>
 
-#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__))
+#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__))
 int __mingw_has_sse (void);
 
 int __mingw_has_sse(void)
@@ -32,7 +33,8 @@ int __mingw_has_sse(void)
     return 1;
   return 0;
 }
-#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)) */
+#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__)) */
 
 /* 7.6.2.1
    The feclearexcept function clears the supported exceptions
@@ -45,7 +47,7 @@ int feclearexcept (int excepts)
   __asm__ volatile ("fmrx %0, FPSCR" : "=r" (_env));
   _env.__cw &= ~(excepts & FE_ALL_EXCEPT);
   __asm__ volatile ("fmxr FPSCR, %0" : : "r" (_env));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   (void) _env;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
diff --git a/mingw-w64-crt/misc/fegetenv.c b/mingw-w64-crt/misc/fegetenv.c
index 31960816e..cd89655ef 100644
--- a/mingw-w64-crt/misc/fegetenv.c
+++ b/mingw-w64-crt/misc/fegetenv.c
@@ -5,9 +5,11 @@
  */
 #include <fenv.h>
 
-#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__))
+#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__))
 int __mingw_has_sse (void);
-#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)) */
+#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__)) */
 
 /* 7.6.4.1
    The fegetenv function stores the current floating-point environment
@@ -17,7 +19,7 @@ int fegetenv (fenv_t * envp)
 {
 #if defined(_ARM_) || defined(__arm__)
   __asm__ volatile ("fmrx %0, FPSCR" : "=r" (*envp));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
   envp->__cw = fpcr;
diff --git a/mingw-w64-crt/misc/fegetexceptflag.c b/mingw-w64-crt/misc/fegetexceptflag.c
index eaa940a2a..c20f74bc3 100644
--- a/mingw-w64-crt/misc/fegetexceptflag.c
+++ b/mingw-w64-crt/misc/fegetexceptflag.c
@@ -5,9 +5,11 @@
  */
 #include <fenv.h>
 
-#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__))
+#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__))
 extern int __mingw_has_sse (void);
-#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)) */
+#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__)) */
 
 /* 7.6.2.2  
    The fegetexceptflag function stores an implementation-defined
@@ -20,7 +22,7 @@ int fegetexceptflag (fexcept_t * flagp, int excepts)
   fenv_t _env;
   __asm__ volatile ("fmrx %0, FPSCR" : "=r" (_env));
   *flagp = _env.__cw & excepts & FE_ALL_EXCEPT;
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
   *flagp = fpcr & excepts & FE_ALL_EXCEPT;
diff --git a/mingw-w64-crt/misc/fegetround.c b/mingw-w64-crt/misc/fegetround.c
index d2fdb7725..abbb35318 100644
--- a/mingw-w64-crt/misc/fegetround.c
+++ b/mingw-w64-crt/misc/fegetround.c
@@ -16,7 +16,7 @@ fegetround (void)
   fenv_t _env;
   __asm__ volatile ("fmrx %0, FPSCR" : "=r" (_env));
   return (_env.__cw & (FE_TONEAREST | FE_DOWNWARD |  FE_UPWARD | FE_TOWARDZERO));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
   return (fpcr & (FE_TONEAREST | FE_DOWNWARD |  FE_UPWARD | FE_TOWARDZERO));
diff --git a/mingw-w64-crt/misc/feholdexcept.c b/mingw-w64-crt/misc/feholdexcept.c
index 8736faadf..e225bfffa 100644
--- a/mingw-w64-crt/misc/feholdexcept.c
+++ b/mingw-w64-crt/misc/feholdexcept.c
@@ -19,7 +19,7 @@ int feholdexcept (fenv_t * envp)
   envp->__cw = _env.__cw;
   _env.__cw &= ~(FE_ALL_EXCEPT);
   __asm__ volatile ("fmxr FPSCR, %0" : : "r" (_env));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
   envp->__cw = fpcr;
@@ -30,6 +30,6 @@ int feholdexcept (fenv_t * envp)
  /* fnstenv sets control word to non-stop for all exceptions, so all we
     need to do is clear the exception flags.  */
   __asm__ __volatile__ ("fnclex");
-#endif /* defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) */
+#endif /* defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__) */
   return 0;
 }
diff --git a/mingw-w64-crt/misc/feraiseexcept.c b/mingw-w64-crt/misc/feraiseexcept.c
index 8ec36f732..f0d448af9 100644
--- a/mingw-w64-crt/misc/feraiseexcept.c
+++ b/mingw-w64-crt/misc/feraiseexcept.c
@@ -20,7 +20,7 @@ int feraiseexcept (int excepts)
   __asm__ volatile ("fmrx %0, FPSCR" : "=r" (_env));
   _env.__cw |= excepts & FE_ALL_EXCEPT;
   __asm__ volatile ("fmxr FPSCR, %0" : : "r" (_env));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   (void) _env;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
@@ -31,6 +31,6 @@ int feraiseexcept (int excepts)
   _env.__status_word |= excepts & FE_ALL_EXCEPT;
   __asm__ volatile ("fldenv %0;"
 		    "fwait;" : : "m" (_env));
-#endif /* defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) */
+#endif /* defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__) */
   return 0;
 }
diff --git a/mingw-w64-crt/misc/fesetenv.c b/mingw-w64-crt/misc/fesetenv.c
index a3279bddd..1855db068 100644
--- a/mingw-w64-crt/misc/fesetenv.c
+++ b/mingw-w64-crt/misc/fesetenv.c
@@ -7,9 +7,11 @@
 #include <fenv.h>
 #include <float.h>
 
-#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__))
+#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__))
 extern int __mingw_has_sse (void);
-#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)) */
+#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__)) */
 
 /* 7.6.4.3
    The fesetenv function establishes the floating-point environment
@@ -32,7 +34,7 @@ int fesetenv (const fenv_t * envp)
     _fpreset();
   else
     __asm__ volatile ("fmxr FPSCR, %0" : : "r" (*envp));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   if (envp == FE_DFL_ENV) {
     /* Use the choice made at app startup */
     _fpreset();
diff --git a/mingw-w64-crt/misc/fesetexceptflag.c b/mingw-w64-crt/misc/fesetexceptflag.c
index 7e3361c6a..3565040db 100644
--- a/mingw-w64-crt/misc/fesetexceptflag.c
+++ b/mingw-w64-crt/misc/fesetexceptflag.c
@@ -5,9 +5,11 @@
  */
 #include <fenv.h>
 
-#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__))
+#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__))
 extern int __mingw_has_sse (void);
-#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)) */
+#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__)) */
 
 /* 7.6.2.4
    The fesetexceptflag function sets the complete status for those
@@ -29,7 +31,7 @@ int fesetexceptflag (const fexcept_t * flagp, int excepts)
   _env.__cw &= ~excepts;
   _env.__cw |= (*flagp & excepts);
   __asm__ volatile ("fmxr FPSCR, %0" : : "r" (_env));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   (void) _env;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
diff --git a/mingw-w64-crt/misc/fesetround.c b/mingw-w64-crt/misc/fesetround.c
index 624a9997d..93a458a8c 100644
--- a/mingw-w64-crt/misc/fesetround.c
+++ b/mingw-w64-crt/misc/fesetround.c
@@ -5,9 +5,11 @@
  */
 #include <fenv.h>
 
-#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__))
+#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__))
 int __mingw_has_sse (void);
-#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)) */
+#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__)) */
 
  /* 7.6.3.2
     The fesetround function establishes the rounding direction
@@ -25,7 +27,7 @@ int fesetround (int mode)
   _env.__cw &= ~(FE_TONEAREST | FE_DOWNWARD |  FE_UPWARD | FE_TOWARDZERO);
   _env.__cw |= mode;
   __asm__ volatile ("fmxr FPSCR, %0" : : "r" (_env));
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   if ((mode & ~(FE_TONEAREST | FE_DOWNWARD | FE_UPWARD | FE_TOWARDZERO)) != 0)
     return -1;
diff --git a/mingw-w64-crt/misc/fetestexcept.c b/mingw-w64-crt/misc/fetestexcept.c
index da073e6d0..1f64c4631 100644
--- a/mingw-w64-crt/misc/fetestexcept.c
+++ b/mingw-w64-crt/misc/fetestexcept.c
@@ -6,9 +6,11 @@
 
 #include <fenv.h> 
 
-#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__))
+#if !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) || \
+  defined(_ARM64EC_) || defined(__arm64ec__))
 extern int __mingw_has_sse (void);
-#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__)) */
+#endif /* !(defined(_ARM_) || defined(__arm__) || defined(_ARM64_) || defined(__aarch64__) ||
+          defined(_ARM64EC_) || defined(__arm64ec__)) */
 
 /* 7.6.2.5 
    The fetestexcept function determines which of a specified subset of
@@ -24,7 +26,7 @@ int fetestexcept (int excepts)
   fenv_t _env;
   __asm__ volatile ("fmrx %0, FPSCR" : "=r" (_env));
   return _env.__cw & excepts & FE_ALL_EXCEPT;
-#elif defined(_ARM64_) || defined(__aarch64__)
+#elif defined(_ARM64_) || defined(__aarch64__) || defined(_ARM64EC_) || defined(__arm64ec__)
   unsigned __int64 fpcr;
   __asm__ volatile ("mrs %0, fpcr" : "=r" (fpcr));
   return fpcr & excepts & FE_ALL_EXCEPT;
-- 
2.25.1

