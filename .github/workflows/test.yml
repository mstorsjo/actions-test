name: Test building various projects with gas-preprocessor

on:
  push:

jobs:
  dav1d-msvc-wine:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm64
    container: linaro/wine-arm64
    steps:
      - name: Checkout msvc-wine
        uses: actions/checkout@v4
        with:
          repository: mstorsjo/msvc-wine
          ref: 00c2c606c33eb83bc40657aab964b280fe6b4f96
          path: msvc-wine
      - name: Install msvc-wine
        env:
          WINEPREFIX: /tmp/wine-x64-prefix
        run: |
          apt-get update && apt-get install -y --no-install-recommends wine python3 msitools ca-certificates ninja-build winbind meson
          wine wineboot
          cd msvc-wine
          ./vsdownload.py --accept-license --dest /opt/msvc
          echo "#!/bin/bash" > wrappers/wine-msvc-new.sh
          echo "export WINEPREFIX=/tmp/wine-x64-prefix" >> wrappers/wine-msvc-new.sh
          cat wrappers/wine-msvc.sh >> wrappers/wine-msvc-new.sh
          chmod a+x wrappers/wine-msvc-new.sh
          mv wrappers/wine-msvc-new.sh wrappers/wine-msvc.sh
          ./install.sh /opt/msvc
      - name: Checkout dav1d
        uses: actions/checkout@v4
        with:
          repository: videolan/dav1d
          ref: 932b323c3e5bbedf2c535618dbc5ad04fea2aa6e
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          path: gas-preprocessor
      - name: Build (and test checkasm)
        run: |
          mkdir build
          cd build
          export PATH=$(pwd)/../gas-preprocessor:/opt/msvc/bin/${{matrix.arch}}:$PATH

          arch=${{matrix.arch}}
          case $arch in
          arm)
              cpu=armv7
              cpu_family=arm
              ;;
          arm64)
              cpu=aarch64
              cpu_family=aarch64
              exe_wrapper="exe_wrapper = ['wine-arm64']"
              ;;
          esac
          cat >cross.txt <<EOF
          [binaries]
          c = 'cl'
          cpp = 'cl'
          ar = 'lib'
          windres = 'rc'
          $exe_wrapper

          [properties]
          needs_exe_wrapper = true

          [host_machine]
          system = 'windows'
          cpu_family = '$cpu_family'
          cpu = '$cpu'
          endian = 'little'
          EOF

          meson setup --cross-file cross.txt --buildtype release -Dtrim_dsp=false --werror ..
          ninja
          meson test checkasm -v

  openh264-msvc-wine-meson:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - arm
          - arm64
    container: linaro/wine-arm64
    steps:
      - name: Checkout msvc-wine
        uses: actions/checkout@v4
        with:
          repository: mstorsjo/msvc-wine
          ref: 00c2c606c33eb83bc40657aab964b280fe6b4f96
          path: msvc-wine
      - name: Install msvc-wine
        env:
          WINEPREFIX: /tmp/wine-x64-prefix
        run: |
          apt-get update && apt-get install -y --no-install-recommends wine python3 msitools ca-certificates ninja-build winbind meson
          wine wineboot
          cd msvc-wine
          ./vsdownload.py --accept-license --dest /opt/msvc
          echo "#!/bin/bash" > wrappers/wine-msvc-new.sh
          echo "export WINEPREFIX=/tmp/wine-x64-prefix" >> wrappers/wine-msvc-new.sh
          cat wrappers/wine-msvc.sh >> wrappers/wine-msvc-new.sh
          chmod a+x wrappers/wine-msvc-new.sh
          mv wrappers/wine-msvc-new.sh wrappers/wine-msvc.sh
          ./install.sh /opt/msvc
      - name: Checkout openh264
        uses: actions/checkout@v4
        with:
          repository: cisco/openh264
          ref: c59550a2147c255cc8e09451f6deb96de2526b6d
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          path: gas-preprocessor
      - name: Build (and test)
        run: |
          mkdir builddir
          cd builddir
          export PATH=$(pwd)/../gas-preprocessor:/opt/msvc/bin/${{matrix.arch}}:$PATH

          arch=${{matrix.arch}}
          case $arch in
          arm)
              cpu=armv7
              cpu_family=arm
              ;;
          arm64)
              cpu=aarch64
              cpu_family=aarch64
              exe_wrapper="exe_wrapper = ['wine-arm64']"
              ;;
          esac
          cat >cross.txt <<EOF
          [binaries]
          c = 'cl'
          cpp = 'cl'
          ar = 'lib'
          windres = 'rc'
          $exe_wrapper

          [properties]
          needs_exe_wrapper = true

          [host_machine]
          system = 'windows'
          cpu_family = '$cpu_family'
          cpu = '$cpu'
          endian = 'little'
          EOF

          meson setup --cross-file cross.txt --buildtype release ..
          ninja
          meson test -v -t 100

  openh264-llvm-mingw-meson:
    runs-on: ubuntu-latest
    container: linaro/wine-arm64
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64
    steps:
      - name: Install prerequisites
        run: |
          apt-get update && apt-get install -y --no-install-recommends meson ninja-build
      - name: Checkout openh264
        uses: actions/checkout@v4
        with:
          repository: cisco/openh264
          ref: c59550a2147c255cc8e09451f6deb96de2526b6d
      - name: Install llvm-mingw
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -Jxf llvm-mingw-*-ucrt-ubuntu-*-x86_64.tar.xz
          rm llvm-mingw-*.tar.xz
          mv llvm-mingw-* /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          path: gas-preprocessor
      - name: Build
        run: |
          mkdir builddir
          cd builddir

          arch=${{matrix.arch}}
          case $arch in
          armv7)
              cpu=armv7
              cpu_family=arm
              ;;
          aarch64)
              cpu=aarch64
              cpu_family=aarch64
              exe_wrapper="exe_wrapper = ['wine-arm64']"
              ;;
          esac
          cat >cross.txt <<EOF
          [binaries]
          c = '${{matrix.arch}}-w64-mingw32-clang'
          cpp = '${{matrix.arch}}-w64-mingw32-clang++'
          ar = '${{matrix.arch}}-w64-mingw32-ar'
          windres = '${{matrix.arch}}-w64-mingw32-windres'
          $exe_wrapper

          [properties]
          cpp_link_args = ['-static-libgcc', '-static-libstdc++']
          needs_exe_wrapper = true

          [host_machine]
          system = 'windows'
          cpu_family = '$cpu_family'
          cpu = '$cpu'
          endian = 'little'
          EOF

          export PATH=$(pwd)/../gas-preprocessor:$PATH

          meson setup --cross-file cross.txt --buildtype release ..
          ninja
          meson test -v -t 100

  openh264-llvm-mingw-make:
    runs-on: ubuntu-latest
    container: linaro/wine-arm64
    strategy:
      fail-fast: false
      matrix:
        arch:
          - aarch64
    steps:
      - name: Checkout openh264
        uses: actions/checkout@v4
        with:
          repository: cisco/openh264
          ref: c59550a2147c255cc8e09451f6deb96de2526b6d
      - name: Install llvm-mingw
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20231128/llvm-mingw-20231128-ucrt-ubuntu-20.04-x86_64.tar.xz
          tar -Jxf llvm-mingw-*-ucrt-ubuntu-*-x86_64.tar.xz
          rm llvm-mingw-*.tar.xz
          mv llvm-mingw-* /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v4
        with:
          path: gas-preprocessor
      - name: Build
        run: |
          apt-get update && apt-get install -y make
          make gtest-bootstrap

          mkdir builddir
          cd builddir

          export PATH=$(pwd)/../gas-preprocessor:$PATH

          make -f ../Makefile V=0 OS=mingw_nt ARCH=${{matrix.arch}} CC=${{matrix.arch}}-w64-mingw32-clang CXX=${{matrix.arch}}-w64-mingw32-clang++ AR=${{matrix.arch}}-w64-mingw32-ar LDFLAGS="-static-libgcc -static-libstdc++" -j$(nproc)
      - name: Test
        if: ${{matrix.arch == 'aarch64'}}
        run: |
          cd builddir
          wine-arm64 codec_unittest.exe
