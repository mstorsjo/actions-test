name: Builds
on:
  push:

jobs:
  # Test cross-building ffmpeg for all 4 targeted architectures from linux.
  # This is done only on scheduled builds, with a toolchain with assertions
  # enabled, to catch code generation bugs that might trigger asserts, to
  # find such regressions early.
  linux-test-cross-build-ffmpeg:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - i686
          - x86_64
          - armv7
          - aarch64
    steps:
      - name: Install wine
        if: matrix.arch == 'x86_64'
        run: |
          # dpkg --add-architecture i386 to install 32 bit wine fails currently
          sudo apt-get update && sudo apt-get install wine64-development
          wine64 wineboot
      - name: Set up wine-arm64
        if: matrix.arch == 'aarch64'
        run: |
          docker pull linaro/wine-arm64
          echo "#!/bin/sh" > wine-arm64
          echo "EXE=\"\$1\"" >> wine-arm64
          echo "shift" >> wine-arm64
          echo "case \"\$EXE\" in" >> wine-arm64
          echo "/*) BASE=\"\$(dirname \"\$EXE\")\" ;;" >> wine-arm64
          echo "*) BASE=\"\$(pwd)\"; EXE=\"\$BASE/\$EXE\" ;;" >> wine-arm64
          echo "esac" >> wine-arm64
          echo "while true; do" >> wine-arm64
          echo "    parent=\"\$(dirname \"\$BASE\")\"" >> wine-arm64
          echo "    if [ \"\$parent\" = \"/\" ]; then" >> wine-arm64
          echo "        break" >> wine-arm64
          echo "    else" >> wine-arm64
          echo "        BASE=\"\$parent\"" >> wine-arm64
          echo "    fi" >> wine-arm64
          echo "done" >> wine-arm64
          echo "docker run --rm -v \"\$BASE:\$BASE\" linaro/wine-arm64 wine-arm64 \"\$EXE\" \"\$@\"" >> wine-arm64
          chmod a+x wine-arm64
          sudo mkdir -p /opt/wine-arm64/bin
          sudo mv wine-arm64 /opt/wine-arm64/bin
          echo /opt/wine-arm64/bin >> $GITHUB_PATH
      - name: Unpack cross toolchain
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20230320/llvm-mingw-20230320-ucrt-ubuntu-18.04-x86_64.tar.xz
          tar -Jxf llvm-mingw-*.tar.xz
          rm llvm-mingw-*.tar.xz
          sudo mv llvm-mingw* /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - name: Checkout ffmpeg
        uses: actions/checkout@v3
        with:
          repository: ffmpeg/ffmpeg
          ref: n6.0
          path: ffmpeg
      - name: Build ffmpeg
        run: |
          sudo apt-get update && sudo apt-get install nasm
          mkdir ffmpeg-build
          cd ffmpeg-build
          # Set a limit of 3 minutes per process/object file; with unproven
          # versions from latest git, the compiler may occasionally hang.
          # Make sure we exit in a reasonable time instead of waiting for
          # the whole github actions timeout of 6h before exiting.
          ulimit -t 180
          case "${{matrix.arch}}" in
          x86_64)
              ARGS="--target-exec=wine64"
              ;;
          aarch64)
              ARGS="--target-exec=wine-arm64"
              ;;
          esac
          ../ffmpeg/configure --arch=${{matrix.arch}} --target-os=mingw32 --cross-prefix=${{matrix.arch}}-w64-mingw32- --enable-gpl --samples=../fate-samples $ARGS
          make -j$(nproc)
          case "${{matrix.arch}}" in
          x86_64|aarch64)
              make fate-rsync
              make -j$(nproc) fate
              ;;
          esac

  # Test building ffmpeg for natively on x86_64 Windows and run its tests,
  # to find cases of compiler bugs don't show up as failed asserts in the
  # compiler itself, but that only show up at runtime. This is only done
  # for scheduled builds.
  test-ffmpeg:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - i686
    steps:
      - name: Avoid git checking out files with CRLF
        shell: cmd
        run: |
          git config --global core.autocrlf false
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: false
          install: >-
            unzip
            make
            rsync
            diffutils
          pacboy: >-
            nasm:p
      - name: Unpack toolchain
        run: |
          curl -LO https://github.com/mstorsjo/llvm-mingw/releases/download/20230320/llvm-mingw-20230320-ucrt-${{matrix.arch}}.zip
          unzip -q llvm-mingw-*.zip
          rm llvm-mingw-*.zip
          mv llvm-mingw-* /llvm-mingw
          echo /llvm-mingw/bin >> $GITHUB_PATH
      - name: Checkout ffmpeg
        uses: actions/checkout@v3
        with:
          repository: ffmpeg/ffmpeg
          ref: n6.0
          path: ffmpeg
      - name: Build & test ffmpeg
        run: |
          export PATH=/llvm-mingw/bin:$PATH
          mkdir ffmpeg-build
          cd ffmpeg-build
          ../ffmpeg/configure --samples=../fate-samples --enable-gpl
          make -j$(nproc)
          make fate-rsync
          make -j$(nproc) fate
