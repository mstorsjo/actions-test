name: Builds
on:
  push:
    branches:
      - '**'

permissions:
  contents: read

jobs:
  # For scheduled builds, get the commit ids of the latest versions to build.
  #
  # Doing this as one single job, which then propagates the information further
  # to the other jobs, so that all build jobs in one workflow builds the exact
  # same version. This allows trusting builds without assertions enabled
  # slightly more, when we know a separate build of the same version but with
  # assertions enabled, has passed some amount of tests.
  get-versions:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    runs-on: ubuntu-latest
    steps:
      - name: Touch file
        run: |
          touch versions
      - name: Check latest version
        if: github.event_name == 'schedule'
        run: |
          echo LLVM_VERSION=$(git ls-remote https://github.com/llvm/llvm-project.git | grep 'refs/heads/main$' | awk '{print $1}') >> versions
          echo MINGW_W64_VERSION=$(git ls-remote https://github.com/mingw-w64/mingw-w64.git | grep 'refs/heads/master$' | awk '{print $1}') >> versions
          echo PYTHON_VERSION_MINGW=$(git ls-remote https://github.com/msys2-contrib/cpython-mingw.git | grep 'refs/heads/mingw-v3.10.5$' | awk '{print $1}') >> versions
          cat versions
      - uses: actions/upload-artifact@v3
        with:
          name: versions
          path: |
            versions
          retention-days: 7

  # Build a cross compiler for Linux, targeting Windows.
  linux:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    needs: [get-versions]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        if: github.event_name == 'schedule'
        with:
          name: versions
      - name: Set build env vars
        if: github.event_name == 'schedule'
        run: |
          . versions
          echo Building llvm-project $LLVM_VERSION mingw-w64 $MINGW_W64_VERSION
          cat versions >> $GITHUB_ENV
          mkdir -p install/llvm-mingw
          cp versions install/llvm-mingw
      - name: Build
        run: |
          mkdir -p $(pwd)/install/llvm-mingw
          touch $(pwd)/install/llvm-mingw/foo
          cd install
          TAG=nightly
          DISTRO=ubuntu-$(grep DISTRIB_RELEASE /etc/lsb-release | cut -f 2 -d =)-$(uname -m)
          NAME=llvm-mingw-$TAG-ucrt-$DISTRO
          mv llvm-mingw $NAME
          tar -Jcf ../$NAME.tar.xz $NAME
      - uses: actions/upload-artifact@v3
        with:
          name: linux-toolchain
          path: |
            llvm-mingw-*.tar.xz
          retention-days: 7

  # Build a cross compiler for Linux, targeting Windows, with assertions enabled.
  #
  # The scheduled builds are made with the latest git version of llvm-project
  # and mingw-w64. When using random git snapshot builds of llvm, there's
  # always a risk for bugs - thus build such versions with assertions enabled,
  # to better catch such bugs early. This makes the first-stage toolchain built
  # here in scheduled builds somewhat slower.
  linux-asserts:
    if: true
    needs: [get-versions]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        if: github.event_name == 'schedule'
        with:
          name: versions
      - name: Set build env vars
        if: github.event_name == 'schedule'
        run: |
          . versions
          echo Building llvm-project $LLVM_VERSION mingw-w64 $MINGW_W64_VERSION, with assertions enabled
          cat versions >> $GITHUB_ENV
          mkdir -p install/llvm-mingw
          cp versions install/llvm-mingw
      - name: Build
        run: |
          mkdir -p $(pwd)/install/llvm-mingw
          touch $(pwd)/install/llvm-mingw/foo
          cd install
          tar -Jcf ../llvm-mingw-linux.tar.xz llvm-mingw
      - uses: actions/upload-artifact@v3
        with:
          name: linux-asserts-toolchain
          path: |
            llvm-mingw-linux.tar.xz
          retention-days: 7

  # Build a cross compiler for macOS, targeting Windows.
  macos:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    needs: [get-versions]
    runs-on: macos-latest
    steps:
      - uses: actions/download-artifact@v3
        if: github.event_name == 'schedule'
        with:
          name: versions
      - name: Set build env vars
        if: github.event_name == 'schedule'
        run: |
          . versions
          echo Building llvm-project $LLVM_VERSION mingw-w64 $MINGW_W64_VERSION
          cat versions >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Build
        run: |
          mkdir -p $(pwd)/install/llvm-mingw
          touch $(pwd)/install/llvm-mingw/foo
          cd install
          TAG=nightly
          NAME=llvm-mingw-$TAG-ucrt-macos-universal
          mv llvm-mingw $NAME
          tar -Jcf ../$NAME.tar.xz $NAME
      - uses: actions/upload-artifact@v3
        with:
          name: macos-toolchain
          path: |
            llvm-mingw-*.tar.xz
          retention-days: 7

  # Test building the toolchain on msys2 (in the mingw64 and clang64
  # environments). The binaries built here rely on the runtime libraries from
  # the host environment (libstdc++ or libc++). No artifacts are stored from
  # these builds, but llvm-mingw's tests are run.
  msys2:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    needs: [get-versions]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        sys:
          - mingw64
          - clang64
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
      - uses: actions/download-artifact@v3
        if: github.event_name == 'schedule'
        with:
          name: versions
      - name: Set build env vars
        if: github.event_name == 'schedule'
        run: |
          . versions
          echo Building llvm-project $LLVM_VERSION mingw-w64 $MINGW_W64_VERSION
          cat versions >> $GITHUB_ENV
      - uses: actions/checkout@v3
      - name: Build
        run: |
          echo foo1

  # Use the Linux cross compilers built in the first step to cross compile
  # llvm and make a proper standalone toolchain for Windows (for all 4
  # architectures). The binaries built here match actual releases quite closely.
  linux-cross:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    needs: [linux]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - i686
          - x86_64
          - armv7
          - aarch64
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: linux-toolchain
      - name: Unpack cross toolchain
        run: |
          tar -Jxf llvm-mingw-*.tar.xz
          rm llvm-mingw-*.tar.xz
          sudo mv llvm-mingw* /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - uses: actions/checkout@v3
      - name: Fetch version
        if: github.event_name == 'schedule'
        run: |
          . /opt/llvm-mingw/versions
          echo Building llvm-project $LLVM_VERSION mingw-w64 $MINGW_W64_VERSION cpython-mingw $PYTHON_VERSION_MINGW
          cat /opt/llvm-mingw/versions >> $GITHUB_ENV
          mkdir -p install/llvm-mingw-${{matrix.arch}}
          cp /opt/llvm-mingw/versions install/llvm-mingw-${{matrix.arch}}
      - name: Build
        run: |
          mkdir -p $(pwd)/install/llvm-mingw-${{matrix.arch}}
          touch $(pwd)/install/llvm-mingw-${{matrix.arch}}/foo
          cd install
          TAG=nightly
          NAME=llvm-mingw-$TAG-ucrt-${{matrix.arch}}
          mv llvm-mingw-${{matrix.arch}} $NAME
          zip -9rq ../$NAME.zip $NAME
      - uses: actions/upload-artifact@v3
        with:
          name: windows-${{matrix.arch}}-toolchain
          path: |
            llvm-mingw-*.zip
          retention-days: 7

  # Run llvm-mingw's tests on x86_64 (and i686) with the cross-built x86_64
  # toolchain from above.
  test-toolchain:
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    needs: [linux-cross]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - i686
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: >-
            unzip
      - uses: actions/download-artifact@v3
        with:
          name: windows-${{matrix.arch}}-toolchain
      - name: Unpack toolchain
        run: |
          unzip -q llvm-mingw-*.zip
          rm llvm-mingw-*.zip
          mv llvm-mingw-* /llvm-mingw
          echo /llvm-mingw/bin >> $GITHUB_PATH
      - uses: actions/checkout@v3
      - name: Run tests
        run: |
          echo foo2

  # Run libcxx's tests with the cross-built i686/x86_64 toolchains from above.
  # (This builds its own copy of libcxx, but it should be pretty much
  # identical to the one shipped - and tests that the toolchain works
  # for running the libcxx tests.)
  # This also forces testing the bundled python executables.
  test-libcxx:
    # This test is kinda slow, and kinda redundant (libcxx does contain
    # llvm-mingw configurations in its own CI, so the only difference with
    # testing here is different runners with different OS setups, and
    # testing with the latest compiler instead of an older release).
    # Therefore, keep the test disabled by default; it's easy to enable
    # temporarily on a branch for testing.
    # The libcxxabi and libunwind tests don't pass on the pinned 16.x branch,
    # only on git main.
    if: true
    needs: [linux-cross]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - i686
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: windows-${{matrix.arch}}-toolchain
      - name: Unpack toolchain
        run: |
          Expand-Archive llvm-mingw-*.zip -DestinationPath .
          del llvm-mingw-*.zip
          mv llvm-mingw-* c:\llvm-mingw
          echo "c:\llvm-mingw\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "c:\llvm-mingw\python\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "PYTHON_EXE=c:/llvm-mingw/python/bin/python3.exe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Fetch version
        if: github.event_name == 'schedule'
        run: |
          cat c:\llvm-mingw\versions | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - uses: actions/checkout@v3
      - name: Build and test libcxx
        run: |
          echo foo3

  # Run the OpenMP tests with the cross-built i686/x86_64 toolchains from above.
  # This also forces testing the bundled python executables.
  test-openmp:
    # Only running these tests in scheduled builds.
    if: true
    needs: [linux-cross]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { arch: i686, asmflag: }
          - { arch: x86_64, asmflag: -m64 }
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: windows-${{matrix.arch}}-toolchain
      - name: Unpack toolchain
        run: |
          Expand-Archive llvm-mingw-*.zip -DestinationPath .
          del llvm-mingw-*.zip
          mv llvm-mingw-* c:\llvm-mingw
          echo "c:\llvm-mingw\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "c:\llvm-mingw\python\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "PYTHON_EXE=c:/llvm-mingw/python/bin/python3.exe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Fetch version
        if: github.event_name == 'schedule'
        run: |
          cat c:\llvm-mingw\versions | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - uses: actions/checkout@v3
      - name: Build test executables
        run: |
          echo foo4
      - name: Build and test OpenMP
        run: |
          echo foo5

  # Run the compiler-rt tests with the cross-built i686/x86_64 toolchains from
  # above. This also forces testing the bundled python executables.
  test-compiler-rt:
    # These tests don't pass on the pinned 16.x branch, but only on latest
    # git main - thus only run it for scheduled jobs.
    if: false
    needs: [linux-cross]
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - x86_64
          - i686
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: windows-${{matrix.arch}}-toolchain
      - name: Unpack toolchain
        run: |
          Expand-Archive llvm-mingw-*.zip -DestinationPath .
          del llvm-mingw-*.zip
          mv llvm-mingw-* c:\llvm-mingw
          echo "c:\llvm-mingw\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "c:\llvm-mingw\python\bin" | Out-File -FilePath $Env:GITHUB_PATH -Encoding utf8 -Append
          echo "PYTHON_EXE=c:/llvm-mingw/python/bin/python3.exe" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - name: Fetch version
        if: github.event_name == 'schedule'
        run: |
          cat c:\llvm-mingw\versions | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      - uses: actions/checkout@v3
      - name: Build test executables
        run: |
          echo foo6
      - name: Build and test compiler-rt
        # Skipping libfuzzer; all tests fail since the clang mingw driver
        # doesn't support -fsanitize=fuzzer.
        # Skipping ORC; the tests rely on llvm-jitlink being available,
        # which requires building a large part of LLVM among the test
        # tools above, and jitlink requires an MSVC toolchain to be available.
        run: |
          echo foo7

  # Test cross-building ffmpeg for all 4 targeted architectures from linux.
  # This is done only on scheduled builds, with a toolchain with assertions
  # enabled, to catch code generation bugs that might trigger asserts, to
  # find such regressions early.
  linux-test-cross-build-ffmpeg:
    if: true
    needs: [linux-asserts]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - i686
          - x86_64
          - armv7
          - aarch64
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: linux-asserts-toolchain
      - name: Unpack cross toolchain
        run: |
          tar -Jxf llvm-mingw-*.tar.xz
          rm llvm-mingw-*.tar.xz
          sudo mv llvm-mingw* /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - name: Build ffmpeg
        run: |
          echo foo8

  # Test building ffmpeg for natively on x86_64 Windows and run its tests,
  # to find cases of compiler bugs don't show up as failed asserts in the
  # compiler itself, but that only show up at runtime. This is only done
  # for scheduled builds.
  test-ffmpeg:
    if: true
    needs: [linux-cross]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Avoid git checking out files with CRLF
        shell: cmd
        run: |
          git config --global core.autocrlf false
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: false
          install: >-
            unzip
      - uses: actions/download-artifact@v3
        with:
          name: windows-x86_64-toolchain
      - name: Unpack toolchain
        run: |
          unzip -q llvm-mingw-*.zip
          rm llvm-mingw-*.zip
          mv llvm-mingw-* /llvm-mingw
          echo /llvm-mingw/bin >> $GITHUB_PATH
      - name: Build & test ffmpeg
        run: |
          echo foo9

  upload-nightly:
    # TODO: Change to only scheduled
    if: (github.event_name != 'schedule') || (github.repository == 'mstorsjo/llvm-mingw')
    permissions:
      contents: write
    needs: [linux, macos, linux-cross]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Rearrange files
        run: |
          mv windows-*-toolchain/*.zip linux-toolchain/*.tar.xz macos-toolchain/*.tar.xz .
      - name: Upload binaries
        env:
          GITHUB_TOKEN: ${{github.token}}
        run: |
          gh release upload nightly *.tar.xz *.zip --clobber -R ${{github.repository}}
