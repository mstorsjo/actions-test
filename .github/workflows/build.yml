name: Builds
on:
  push:
  pull_request:

jobs:
  test-msvc-wine-linux:
    runs-on: ubuntu-latest
    if: false
    steps:
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get install wine64-development python3 msitools python3-simplejson python3-six ca-certificates cmake ninja-build winbind
          wine64 wineboot
      - uses: actions/checkout@v3
      - name: Download MSVC
        run: |
          ./vsdownload.py --accept-license --dest $(pwd)/msvc
          ./install.sh $(pwd)/msvc
      - name: Test using the installed tools
        run: |
          test/test.sh $(pwd)/msvc
      # Intentionally not storing any artifacts with the downloaded tools;
      # the installed files aren't redistributable!

  test-msvc-wine-macos:
    runs-on: macos-latest
    if: false
    steps:
      - name: Install prerequisites
        run: |
          brew install wine-stable msitools cmake ninja
          wine64 wineboot
      - uses: actions/checkout@v3
      - name: Download MSVC
        run: |
          ./vsdownload.py --accept-license --dest $(pwd)/msvc
          ./install.sh $(pwd)/msvc
      - name: Test using the installed tools
        run: |
          test/test.sh $(pwd)/msvc
      # Intentionally not storing any artifacts with the downloaded tools;
      # the installed files aren't redistributable!

  test-clang-lld:
    # Ubuntu 22.04 comes with Clang/LLD 14; at least 13 is required for providing
    # __guard_eh_cont_table and __guard_eh_cont_count which are required with
    # MSVC 2019 16.8 or newer.
    # Since Clang 13, it's possible to point out the installed MSVC/WinSDK with
    # the /winsysroot parameter. LLD also provides the same parameter since
    # version 15. (For versions 13 and 14, this parameter can still be used
    # for linking, as long as linking is done via Clang.)
    runs-on: ubuntu-22.04
    if: false
    steps:
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get install python3 msitools python3-simplejson python3-six ca-certificates clang lld llvm cmake ninja-build
      - name: Set up clang-cl/lld-link symlinks
        run: |
          if [ ! -e /usr/bin/clang-cl ]; then
              sudo ln -s /usr/bin/clang /usr/bin/clang-cl
          fi
          if [ ! -e /usr/bin/lld-link ]; then
              sudo ln -s /usr/bin/lld /usr/bin/lld-link
          fi
      - uses: actions/checkout@v3
      - name: Download MSVC
        run: |
          ./vsdownload.py --accept-license --dest $(pwd)/msvc
          ./install.sh $(pwd)/msvc
      - name: Test using the installed tools
        run: |
          test/test-clang-cl.sh $(pwd)/msvc
      # Intentionally not storing any artifacts with the downloaded tools;
      # the installed files aren't redistributable!

  test-docker:
    runs-on: ubuntu-latest
    if: false
    steps:
      - uses: actions/checkout@v3
      - name: Build the main msvc-wine docker image
        run: |
          docker build -t msvc-wine -f Dockerfile .
      - name: Test using the installed tools
        run: |
          docker build -f Dockerfile.hello .
      - name: Test using the installation with Clang
        run: |
          docker build -f Dockerfile.clang .
      # Intentionally not pushing the built docker images;
      # the installed files aren't redistributable!

  test-build-dav1d:
    runs-on: ubuntu-latest
    steps:
      - name: Install prerequisites
        run: |
          sudo apt-get update && sudo apt-get install wine64-development python3 msitools python3-simplejson python3-six ca-certificates ninja-build winbind meson nasm
          wine64 wineboot
      - uses: actions/checkout@v3
      - name: Download MSVC
        run: |
          ./vsdownload.py --accept-license --dest $(pwd)/msvc
          ./install.sh $(pwd)/msvc
      - name: Checkout gas-preprocessor
        uses: actions/checkout@v3
        with:
          repository: ffmpeg/gas-preprocessor
          ref: 9309c67acb535ca6248f092e96131d8eb07eefc1
          path: gas-preprocessor
      - name: Add gas-preprocessor to path
        run: |
          echo $(pwd)/gas-preprocessor >> $GITHUB_PATH
      - name: Checkout dav1d
        run: |
          git clone https://code.videolan.org/videolan/dav1d.git
          cd dav1d
          git checkout 1.2.1
      - name: Build dav1d
        run: |
          cd dav1d
          mkdir build
          cd build
          export PATH=$(pwd)/../../msvc/bin/arm64:$PATH
          cat >cross.txt <<EOF
          [binaries]
          c = 'cl'
          cpp = 'cl'
          ar = 'lib'
          windres = 'rc'
          ;exe_wrapper = ['wine']

          [properties]
          needs_exe_wrapper = true

          [host_machine]
          system = 'windows'
          cpu_family = 'aarch64'
          cpu = 'aarch64'
          endian = 'little'
          EOF

          meson setup --cross-file cross.txt --buildtype release --prefix $(pwd)/../../install ..
          ninja -v
          ninja install
          cp ../../msvc/vc/Redist/MSVC/1*/arm64/*.CRT/vcruntime*.dll ../../install/bin
      # The build output from MSVC actually is redistributable, even if the
      # toolchain itself isn't.
      - uses: actions/upload-artifact@v3
        with:
          name: dav1d
          path: |
            install/*
          retention-days: 7
