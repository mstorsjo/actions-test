name: GitHub Actions Demo
on: [push]

jobs:
  linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          sudo apt-get update && sudo apt-get install ninja-build
          ./build-all.sh $(pwd)/install/llvm-mingw --disable-clang-tools-extra --disable-lldb
          cd install
          tar -Jcf ../llvm-mingw-linux.tar.xz llvm-mingw
      - uses: actions/upload-artifact@v2
        with:
          name: linux-toolchain
          path: |
            llvm-mingw-linux.tar.xz
          retention-days: 7

  macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build
        run: |
          brew install ninja
          # Building with MACOS_REDIST=1 (building universal binaries) without
          # --disable-lldb fails in Github Actions, because python is available
          # (and gets picked up), but only exists in native form.
          MACOS_REDIST=1 ./build-all.sh $(pwd)/install/llvm-mingw --disable-clang-tools-extra --disable-lldb
          cd install
          tar -Jcf ../llvm-mingw-macos.tar.xz llvm-mingw
      - uses: actions/upload-artifact@v2
        with:
          name: macos-toolchain
          path: |
            llvm-mingw-macos.tar.xz
          retention-days: 7

  msys:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        sys:
          - mingw64
          - clang64
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{matrix.sys}}
          install: >-
            git
            make
            tar
          pacboy: >-
            toolchain:p
            cmake:p
            ninja:p
      - uses: actions/checkout@v2
      - name: Build
        run: |
          ./build-all.sh $(pwd)/install/llvm-mingw --disable-clang-tools-extra --disable-lldb
          ./run-tests.sh $(pwd)/install/llvm-mingw

  linux-cross:
    needs: [linux]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - i686
          - x86_64
          - armv7
          - aarch64
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: linux-toolchain
      - name: Unpacking cross toolchain
        run: |
          tar -Jxvf llvm-mingw-linux.tar.xz
          rm llvm-mingw-linux.tar.xz
          sudo mv llvm-mingw /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Build
        run: |
          sudo apt-get update && sudo apt-get install autoconf-archive ninja-build
          ./build-cross-tools.sh /opt/llvm-mingw $(pwd)/install/llvm-mingw-${{matrix.arch}} ${{matrix.arch}} --with-python
          cd install
          zip -9rq ../llvm-mingw-${{matrix.arch}}.zip llvm-mingw-${{matrix.arch}}
      - uses: actions/upload-artifact@v2
        with:
          name: windows-${{matrix.arch}}-toolchain
          path: |
            llvm-mingw-${{matrix.arch}}.zip
          retention-days: 7

  test-toolchain:
    needs: [linux-cross]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          install: >-
            unzip
      - uses: actions/download-artifact@v3
        with:
          name: windows-x86_64-toolchain
      - name: Unpacking toolchain
        run: |
          unzip -q llvm-mingw-x86_64.zip
          rm llvm-mingw-x86_64.zip
          mv llvm-mingw-* /llvm-mingw
          echo /llvm-mingw/bin >> $GITHUB_PATH
      - uses: actions/checkout@v2
      - name: Build
        run: |
          ./run-tests.sh /llvm-mingw

  linux-test-cross-build-ffmpeg:
    needs: [linux]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch:
          - i686
          - x86_64
          - armv7
          - aarch64
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: linux-toolchain
      - name: Unpacking cross toolchain
        run: |
          tar -Jxvf llvm-mingw-linux.tar.xz
          rm llvm-mingw-linux.tar.xz
          sudo mv llvm-mingw /opt/llvm-mingw
          echo /opt/llvm-mingw/bin >> $GITHUB_PATH
      - name: Checkout ffmpeg
        uses: actions/checkout@v2
        with:
          repository: ffmpeg/ffmpeg
          path: ffmpeg
      - name: Building ffmpeg
        run: |
          sudo apt-get update && sudo apt-get install nasm
          mkdir ffmpeg-build
          cd ffmpeg-build
          ../ffmpeg/configure --arch=${{matrix.arch}} --target-os=mingw32 --cross-prefix=${{matrix.arch}}-w64-mingw32- --enable-gpl
          make -j$(nproc)

  test-ffmpeg:
    needs: [linux-cross]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Avoid git checking out files with CRLF
        shell: cmd
        run: |
          git config --global core.autocrlf false
      - uses: msys2/setup-msys2@v2
        with:
          msystem: mingw64
          update: false
          install: >-
            unzip
            make
            rsync
            diffutils
          pacboy: >-
            nasm:p
      - uses: actions/download-artifact@v3
        with:
          name: windows-x86_64-toolchain
      - name: Unpacking toolchain
        run: |
          unzip -q llvm-mingw-x86_64.zip
          rm llvm-mingw-x86_64.zip
          mv llvm-mingw-* /llvm-mingw
          echo /llvm-mingw/bin >> $GITHUB_PATH
      - name: Checkout ffmpeg
        uses: actions/checkout@v2
        with:
          repository: ffmpeg/ffmpeg
          path: ffmpeg
      - name: Building & testing ffmpeg
        run: |
          export PATH=/llvm-mingw/bin:$PATH
          mkdir ffmpeg-build
          cd ffmpeg-build
          ../ffmpeg/configure --samples=../fate-samples --enable-gpl --ignore-tests="vsynth1-mpeg2-422,vsynth2-mpeg2-422,vsynth3-mpeg2-422,vsynth_lena-mpeg2-422,seek-vsynth_lena-mpeg2-422"
          make -j$(nproc)
          make fate-rsync
          make -j$(nproc) fate
